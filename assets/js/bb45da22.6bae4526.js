"use strict";(self.webpackChunkeslint_plugin_hub=self.webpackChunkeslint_plugin_hub||[]).push([[107],{7377:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});var s=i(4848),r=i(8453);const a={},o="Node",t={id:"node",title:"Node",description:"Node Plugin Configuration",source:"@site/docs/node.md",sourceDirName:".",slug:"/node",permalink:"/eslint-plugin-hub/docs/node",draft:!1,unlisted:!1,editUrl:"https://github.com/mindfiredigital/eslint-plugin-hub/edit/main/docs/node.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Angular",permalink:"/eslint-plugin-hub/docs/angular"},next:{title:"MERN",permalink:"/eslint-plugin-hub/docs/mern"}},l={},c=[{value:"Node Plugin Configuration",id:"node-plugin-configuration",level:2},{value:"Node Rules",id:"node-rules",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Node.js Rule Details",id:"nodejs-rule-details",level:2},{value:"1. minimize-complexflows",id:"1-minimize-complexflows",level:3},{value:"2. avoid-runtime-heap-allocation",id:"2-avoid-runtime-heap-allocation",level:3},{value:"3. fixed-loop-bounds",id:"3-fixed-loop-bounds",level:3},{value:"4. no-disable-important-rules",id:"4-no-disable-important-rules",level:3},{value:"5. limit-data-scope",id:"5-limit-data-scope",level:3},{value:"Examples",id:"examples",level:4},{value:"\u2705 Valid Code (Should NOT produce warnings)",id:"-valid-code-should-not-produce-warnings",level:4},{value:"No Global Object Modification",id:"no-global-object-modification",level:4},{value:"Proper Variable Scoping",id:"proper-variable-scoping",level:4},{value:"Modern Variable Declarations",id:"modern-variable-declarations",level:4},{value:"\u274c Invalid Code (Should PRODUCE warnings)",id:"-invalid-code-should-produce-warnings",level:4},{value:"Global Object Modification",id:"global-object-modification",level:4},{value:"Variables in Overly Broad Scope",id:"variables-in-overly-broad-scope",level:4},{value:"Using var Instead of let/const",id:"using-var-instead-of-letconst",level:4},{value:"Combined Violations",id:"combined-violations",level:4},{value:"When to Disable",id:"when-to-disable",level:4},{value:"Recommended Patterns",id:"recommended-patterns",level:4},{value:"\u2705 Instead of Global Modifications",id:"-instead-of-global-modifications",level:4},{value:"\u2705 Instead of Broad Scoping",id:"-instead-of-broad-scoping",level:4},{value:"\u2705 Instead of var",id:"-instead-of-var",level:4},{value:"Benefits",id:"benefits",level:4},{value:"6. limit-reference-depth",id:"6-limit-reference-depth",level:3},{value:"<code>maxDepth</code>",id:"maxdepth",level:4},{value:"<code>requireOptionalChaining</code>",id:"requireoptionalchaining",level:4},{value:"<code>allowSinglePropertyAccess</code>",id:"allowsinglepropertyaccess",level:4},{value:"<code>ignoredBases</code>",id:"ignoredbases",level:4},{value:"<code>ignoreCallExpressions</code>",id:"ignorecallexpressions",level:4},{value:"<code>ignoreImportedModules</code>",id:"ignoreimportedmodules",level:4},{value:"<code>ignoreGlobals</code>",id:"ignoreglobals",level:4},{value:"<code>ignoreCommonPatterns</code>",id:"ignorecommonpatterns",level:4},{value:"Example Configuration",id:"example-configuration",level:4},{value:"Full Configuration in <code>eslint.config.js</code>:",id:"full-configuration-in-eslintconfigjs",level:4},{value:"Examples",id:"examples-1",level:4},{value:"Scenario 1: Default Configuration",id:"scenario-1-default-configuration",level:4},{value:"\u2705 Valid (Should NOT produce warnings):",id:"-valid-should-not-produce-warnings",level:4},{value:"\u274c Invalid (Should PRODUCE warnings):",id:"-invalid-should-produce-warnings",level:4},{value:"Scenario 2: Relaxed Optional Chaining",id:"scenario-2-relaxed-optional-chaining",level:4},{value:"\u2705 Valid (Should NOT produce warnings):",id:"-valid-should-not-produce-warnings-1",level:4},{value:"\u274c Invalid (Should PRODUCE warnings):",id:"-invalid-should-produce-warnings-1",level:4},{value:"Scenario 3: Allow Single Property Access",id:"scenario-3-allow-single-property-access",level:4},{value:"\u2705 Valid (Should NOT produce warnings):",id:"-valid-should-not-produce-warnings-2",level:4},{value:"\u274c Invalid (Should PRODUCE warnings):",id:"-invalid-should-produce-warnings-2",level:4},{value:"Scenario 4: Custom maxDepth",id:"scenario-4-custom-maxdepth",level:4},{value:"\u2705 Valid (Should NOT produce warnings):",id:"-valid-should-not-produce-warnings-3",level:4},{value:"\u274c Invalid (Should PRODUCE warnings):",id:"-invalid-should-produce-warnings-3",level:4},{value:"Scenario 5: Custom Ignored Bases",id:"scenario-5-custom-ignored-bases",level:4},{value:"\u2705 Valid (Should NOT produce warnings):",id:"-valid-should-not-produce-warnings-4",level:4},{value:"\u274c Invalid (Should PRODUCE warnings):",id:"-invalid-should-produce-warnings-4",level:4},{value:"Best Practices",id:"best-practices",level:4},{value:"\u2705 Recommended Patterns:",id:"-recommended-patterns",level:4},{value:"\u274c Patterns to Avoid:",id:"-patterns-to-avoid",level:4},{value:"7. keep-functions-concise",id:"7-keep-functions-concise",level:3},{value:"<code>maxLines</code>",id:"maxlines",level:4},{value:"<code>skipBlankLines</code>",id:"skipblanklines",level:4},{value:"<code>skipComments</code>",id:"skipcomments",level:4},{value:"Example Configuration",id:"example-configuration-1",level:4},{value:"Full Configuration in <code>eslint.config.js</code>:",id:"full-configuration-in-eslintconfigjs-1",level:4},{value:"Examples",id:"examples-2",level:4},{value:"Scenario 1: Default Configuration",id:"scenario-1-default-configuration-1",level:4},{value:"\u2705 Valid (Should NOT produce warnings):",id:"-valid-should-not-produce-warnings-5",level:4},{value:"\u274c Invalid (Should PRODUCE warnings):",id:"-invalid-should-produce-warnings-5",level:4},{value:"Scenario 2: Skip Blank Lines",id:"scenario-2-skip-blank-lines",level:4},{value:"\u2705 Valid (Should NOT produce warnings):",id:"-valid-should-not-produce-warnings-6",level:4},{value:"Scenario 3: Skip Comments",id:"scenario-3-skip-comments",level:4},{value:"\u2705 Valid (Should NOT produce warnings):",id:"-valid-should-not-produce-warnings-7",level:4},{value:"Scenario 4: Combined Options",id:"scenario-4-combined-options",level:4},{value:"\u2705 Valid (Should NOT produce warnings):",id:"-valid-should-not-produce-warnings-8",level:4},{value:"Scenario 5: Zero Line Limit (Extreme)",id:"scenario-5-zero-line-limit-extreme",level:4},{value:"\u2705 Valid (Should NOT produce warnings):",id:"-valid-should-not-produce-warnings-9",level:4},{value:"\u274c Invalid (Should PRODUCE warnings):",id:"-invalid-should-produce-warnings-6",level:4},{value:"\u2705 Recommended Patterns:",id:"-recommended-patterns-1",level:4},{value:"\u274c Patterns to Avoid:",id:"-patterns-to-avoid-1",level:4},{value:"Benefits",id:"benefits-1",level:4},{value:"8. use-runtime-assertions",id:"8-use-runtime-assertions",level:3},{value:"Example Configuration",id:"example-configuration-2",level:4},{value:"Recognized Assertion Patterns",id:"recognized-assertion-patterns",level:4},{value:"Examples",id:"examples-3",level:4},{value:"\u2705 Valid Code (Should NOT produce warnings)",id:"-valid-code-should-not-produce-warnings-1",level:5},{value:"Default Configuration (minAssertions: 2)",id:"default-configuration-minassertions-2",level:4},{value:"Custom minAssertions: 1",id:"custom-minassertions-1",level:4},{value:"Custom Assertion Utilities",id:"custom-assertion-utilities",level:4},{value:"Complex Nested Assertions",id:"complex-nested-assertions",level:4},{value:"\u274c Invalid Code (Should PRODUCE warnings)",id:"-invalid-code-should-produce-warnings-1",level:4},{value:"Default Configuration (minAssertions: 2)",id:"default-configuration-minassertions-2-1",level:4},{value:"Custom minAssertions: 3",id:"custom-minassertions-3",level:4},{value:"Custom Assertion Utilities Not Recognized",id:"custom-assertion-utilities-not-recognized",level:4},{value:"Arrow Functions",id:"arrow-functions",level:4},{value:"Empty Functions (when ignoreEmptyFunctions: false)",id:"empty-functions-when-ignoreemptyfunctions-false",level:4},{value:"Configuration Examples",id:"configuration-examples",level:4},{value:"Strict Validation (3+ assertions)",id:"strict-validation-3-assertions",level:4},{value:"Minimal Validation (1 assertion)",id:"minimal-validation-1-assertion",level:4},{value:"Custom Assertion Libraries",id:"custom-assertion-libraries",level:4},{value:"No Empty Function Exceptions",id:"no-empty-function-exceptions",level:4},{value:"Recommended Patterns",id:"recommended-patterns-1",level:4},{value:"\u2705 Input Validation",id:"-input-validation",level:4},{value:"\u2705 Boundary Checking",id:"-boundary-checking",level:4},{value:"\u2705 State Validation",id:"-state-validation",level:4},{value:"\u2705 Using Custom Assertion Utilities",id:"-using-custom-assertion-utilities",level:4},{value:"When to Disable",id:"when-to-disable-1",level:4},{value:"Alternative Approaches",id:"alternative-approaches",level:4},{value:"Lower minAssertions for Simple Functions",id:"lower-minassertions-for-simple-functions",level:4},{value:"Use Type Checking + Runtime Validation",id:"use-type-checking--runtime-validation",level:4},{value:"Benefits",id:"benefits-2",level:4},{value:"9. minimize-deep-asynchronous-chains",id:"9-minimize-deep-asynchronous-chains",level:3},{value:"Default Configuration",id:"default-configuration",level:4},{value:"Examples",id:"examples-4",level:4},{value:"\u2705 Valid Code (Should NOT produce warnings)",id:"-valid-code-should-not-produce-warnings-2",level:5},{value:"Default Configuration (maxPromiseChainLength: 3, maxAwaitExpressions: 3)",id:"default-configuration-maxpromisechainlength-3-maxawaitexpressions-3",level:4},{value:"Custom Configuration Examples",id:"custom-configuration-examples",level:4},{value:"\u274c Invalid Code (Should PRODUCE warnings)",id:"-invalid-code-should-produce-warnings-2",level:5},{value:"Default Configuration (maxPromiseChainLength: 3, maxAwaitExpressions: 3)",id:"default-configuration-maxpromisechainlength-3-maxawaitexpressions-3-1",level:4},{value:"Custom Configuration Violations",id:"custom-configuration-violations",level:4},{value:"Mixed Violations (Both Types in Same Function)",id:"mixed-violations-both-types-in-same-function",level:4},{value:"Configuration Examples",id:"configuration-examples-1",level:4},{value:"Strict Limits (2 max for both)",id:"strict-limits-2-max-for-both",level:4},{value:"Relaxed Limits (5 max for both)",id:"relaxed-limits-5-max-for-both",level:4},{value:"Mixed Limits (Different for promises vs awaits)",id:"mixed-limits-different-for-promises-vs-awaits",level:4},{value:"Only Check Promise Chains",id:"only-check-promise-chains",level:4},{value:"Recommended Patterns",id:"recommended-patterns-2",level:4},{value:"\u2705 Refactor Long Promise Chains",id:"-refactor-long-promise-chains",level:4},{value:"\u2705 Break Down Complex Async Functions",id:"-break-down-complex-async-functions",level:4},{value:"\u2705 Use Promise.all for Parallel Operations",id:"-use-promiseall-for-parallel-operations",level:4},{value:"When to Disable",id:"when-to-disable-2",level:4},{value:"Alternative Approaches",id:"alternative-approaches-1",level:4},{value:"Higher Limits for Specific Cases",id:"higher-limits-for-specific-cases",level:4},{value:"Functional Composition",id:"functional-composition",level:4},{value:"Benefits",id:"benefits-3",level:4},{value:"10. check-return-values",id:"10-check-return-values",level:3},{value:"<code>requireExplicitIgnore</code>",id:"requireexplicitignore",level:4},{value:"Scenario 1: Default Configuration (requireExplicitIgnore: true)",id:"scenario-1-default-configuration-requireexplicitignore-true",level:4},{value:"\u2705 Valid:",id:"-valid",level:4},{value:"\u274c Invalid:",id:"-invalid",level:4},{value:"Scenario 2: requireExplicitIgnore: false",id:"scenario-2-requireexplicitignore-false",level:4},{value:"\u2705 Valid:",id:"-valid-1",level:4},{value:"11. no-build-env-in-source",id:"11-no-build-env-in-source",level:3},{value:"<code>disallowedEnvVariables</code>",id:"disallowedenvvariables",level:4},{value:"<code>allowedComparisons</code>",id:"allowedcomparisons",level:4},{value:"<code>suggestAlternative</code>",id:"suggestalternative",level:4},{value:"Examples:",id:"examples-5",level:4},{value:"\u2705 Valid:",id:"-valid-2",level:4},{value:"\u274c Invalid:",id:"-invalid-1",level:4},{value:"Best Practices for Node.js Project Reliability",id:"best-practices-for-nodejs-project-reliability",level:2},{value:"Additional Notes",id:"additional-notes",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"node",children:"Node"})}),"\n",(0,s.jsx)(n.h2,{id:"node-plugin-configuration",children:"Node Plugin Configuration"}),"\n",(0,s.jsx)(n.p,{children:"To enhance code quality, maintainability, and enforce best practices in your Node projects, the Eslint Plugin Hub provides several Node.js-focused rules. These rules help manage code complexity and promote efficient memory usage patterns critical for server-side applications."}),"\n",(0,s.jsx)(n.h3,{id:"node-rules",children:"Node Rules"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Rule Name"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"minimize-complex-flows"})}),(0,s.jsx)(n.td,{children:"Enforces simplified control flow by limiting recursion and nesting depth, and detecting direct or lexically scoped recursion to improve readability and reduce error potential."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"avoid-runtime-heap-allocation"})}),(0,s.jsx)(n.td,{children:"Discourages heap allocation of common data structures (arrays, objects, Maps, Sets) within function bodies, especially in loops, to promote reuse and reduce GC pressure."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"limit-reference-depth"})}),(0,s.jsx)(n.td,{children:"Restricts the depth of chained property access and enforces optional chaining to prevent runtime errors, improve null safety, and encourage safer access patterns in deeply nested data structures."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"keep-functions-concise"})}),(0,s.jsx)(n.td,{children:"Enforces a maximum number of lines per function, with options to skip blank lines and comments, to promote readability, maintainability, and concise logic blocks."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fixed-loop-bounds"})}),(0,s.jsx)(n.td,{children:"Enforces that loops have clearly defined termination conditions to prevent infinite loops."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"no-disable-important-rules"})}),(0,s.jsx)(n.td,{children:'Discourages disabling all rules or specific "important" ESLint rules, promoting proactive resolution of linter/compiler warnings.'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"limit-data-scope"})}),(0,s.jsxs)(n.td,{children:["Enforces several best practices for data scoping: disallows global object modification, suggests moving variables to their narrowest functional scope, and discourages ",(0,s.jsx)(n.code,{children:"var"})," usage."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"use-runtime-assertions"})}),(0,s.jsx)(n.td,{children:"Enforces the presence of a minimum number of runtime assertions in functions to validate inputs and critical intermediate values, promoting early error detection and contract-based programming."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"minimize-deep-asynchronous-chains"})}),(0,s.jsxs)(n.td,{children:["Limits the depth of Promise chains (",(0,s.jsx)(n.code,{children:".then"}),"/",(0,s.jsx)(n.code,{children:".catch"}),"/",(0,s.jsx)(n.code,{children:".finally"}),") and the number of ",(0,s.jsx)(n.code,{children:"await"})," expressions within async functions to improve readability and manage complexity in asynchronous operations."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"check-return-values"})}),(0,s.jsxs)(n.td,{children:["Enforces handling of return values from non-void functions. Ignored values should be explicitly marked via ",(0,s.jsx)(n.code,{children:"void"}),", underscore assignment, or a specific comment."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"no-build-env-in-source"})}),(0,s.jsxs)(n.td,{children:["Discourages direct conditional branching on ",(0,s.jsx)(n.code,{children:"process.env"})," variables commonly used as build flags, promoting configuration-driven behavior."]})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["After installing the plugin (",(0,s.jsx)(n.code,{children:"npm install @mindfiredigital/eslint-plugin-hub --save-dev"}),"), you'll need to add the Node.js-specific rules or configurations from ",(0,s.jsx)(n.code,{children:"@mindfiredigital/eslint-plugin-hub"})," to your ESLint configuration file (e.g., ",(0,s.jsx)(n.code,{children:"eslintrc.config.js"}),",",(0,s.jsx)(n.code,{children:".eslintrc.json"}),", ",(0,s.jsx)(n.code,{children:".eslintrc.js"}),", or ",(0,s.jsx)(n.code,{children:".eslintrc.yaml"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["ESLint v9+ uses ",(0,s.jsx)(n.code,{children:"eslint.config.js"})," (flat config). Older versions use ",(0,s.jsx)(n.code,{children:".eslintrc.js"})," (or ",(0,s.jsx)(n.code,{children:".json"}),", ",(0,s.jsx)(n.code,{children:".yaml"}),")."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["For Flat Config (e.g., ",(0,s.jsx)(n.code,{children:"eslint.config.js"}),"):"]})}),"\n",(0,s.jsx)(n.p,{children:"You can extend a pre-defined Node.js configuration from the plugin or configure rules manually."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// eslint.config.js\nimport hub from '@mindfiredigital/eslint-plugin-hub';\n\nexport default [\n  {\n    files: ['**/*.js', '**/*.ts'], // Or more specific files like 'src/**/*.ts'\n    plugins: {\n      hub: hub, // 'hub' is the prefix for your rules\n    },\n    languageOptions: {\n      globals: {\n        ...globals.node, // Recommended for Node.js projects\n      },\n      parserOptions: {\n        ecmaVersion: 2022, // Or your target ECMAScript version\n        sourceType: 'module',\n      },\n    },\n    rules: {\n      'hub/minimize-complexflows': [\n        'warn',\n        {\n          /* options */\n        },\n      ],\n      'hub/avoid-runtime-heap-allocation': [\n        'warn',\n        {\n          /* options */\n        },\n      ],\n      'hub/fixed-loop-bounds': [\n        'warn',\n        {\n          /* options */\n        },\n      ],\n      'hub/no-disable-important-rules': [\n        'warn',\n        {\n          /* options */\n        },\n      ],\n      'hub/limit-data-scope': [\n        'warn',\n        {\n          /* options */\n        },\n      ],\n      'hub/limit-reference-depth': [\n        'warn',\n        {\n          /* options */\n        },\n      ],\n      'hub/keep-functions-concise': [\n        'warn',\n        {\n          /* options */\n        },\n      ],\n      'hub/use-runtime-assertions': [\n        'warn',\n        {\n          minAssertions: 2,\n          assertionUtilityNames: ['assert', 'invariant', 'check'],\n          ignoreEmptyFunctions: true,\n        },\n      ],\n      'hub/minimize-deep-asynchronous-chains': [\n        'warn',\n        {\n          maxPromiseChainLength: 3,\n          maxAwaitExpressions: 3,\n        },\n      ],\n      'hub/check-return-values': ['warn', { requireExplicitIgnore: true }],\n      'hub/no-build-env-in-source': [\n        'warn',\n        {\n          disallowedEnvVariables: ['NODE_ENV', 'DEBUG'],\n          allowedComparisons: { NODE_ENV: ['production'] },\n        },\n      ],\n      // ... any additional rule overrides or additions\n    },\n  },\n];\n"})}),"\n",(0,s.jsx)(n.h2,{id:"nodejs-rule-details",children:"Node.js Rule Details"}),"\n",(0,s.jsx)(n.h3,{id:"1-minimize-complexflows",children:"1. minimize-complexflows"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nExcessive complexity in how a program flows from one instruction to another significantly increases the risk of introducing logic errors that can be hard to find. When code paths become convoluted due to deeply nested structures (like multiple if statements inside each other) or complicated recursive calls, the code becomes much more difficult for developers to read, understand, and mentally trace."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rationale"}),": This difficulty directly impacts maintainability; making changes or adding new features to overly complex code is a challenging and error-prone task. Furthermore, testing all possible paths in such code becomes exponentially harder, leading to less reliable software."]}),"\n",(0,s.jsx)(n.p,{children:"By promoting simpler, more linear, or well-structured control flows, this rule aims to make your code easier to verify, debug, and test. Code that is straightforward in its execution path is generally more robust and less prone to hidden bugs, leading to higher overall software quality and a more efficient development process. Limiting recursion to scenarios with clear, bounded termination conditions also helps prevent stack overflows and makes the recursive logic easier to reason about."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Options"}),": The rule accepts a single object with the following properties:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"maxNestingDepth"})}),"\n",(0,s.jsx)(n.p,{children:"Type: number\nDescription: Specifies the maximum allowed depth of nested control structures (like if, for, while, switch). Nesting beyond this depth will be flagged.\nDefault: 3\nConstraint: Must be a minimum of 1.\nExample Usage:\nJavaScript"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\nrules: { "hub/minimize-complexflows": ["warn", { "maxNestingDepth": 4 }]\n}\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"This would allow nesting up to 4 levels deep."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"allowRecursion"})}),"\n",(0,s.jsx)(n.p,{children:"Type: boolean\nDescription: Determines whether recursive function calls (both direct and lexical) are permitted. If set to false, the rule will flag instances of recursion. If true, recursion checks are disabled.\nDefault: false (meaning recursion is flagged by default)\nExample Usage:\nJavaScript"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n    rules: { "hub/minimize-complexflows": ["warn", { "allowRecursion": true }]\n            }\n}\nThis would allow recursive functions without ESLint warnings from this rule.\nExample of Full Configuration in eslint.config.js:\n\nJavaScript\n\n// eslint.config.js\n// ... other imports and configurations ...\n{\n  plugins: {\n    "hub": hub,\n  },\n  rules: {\n    "hub/minimize-complexflows": ["warn", {\n      "maxNestingDepth": 2,     // Stricter nesting\n      "allowRecursion": true    // Allow recursion\n    }],\n    // ... other rules\n  }\n}\n// ...\n'})}),"\n",(0,s.jsx)(n.p,{children:"These two options (maxNestingDepth and allowRecursion) give you control over how strictly the minimize-complex-flows rule operates in your project."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"hub/minimize-complexflows": [{ "maxNestingDepth": 3, "allowRecursion": false }]'})}),"\n",(0,s.jsx)(n.p,{children:"Valid: Nesting up to 3 levels"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function processOrder(order) {\n  if (order) {\n    // Level 1\n    if (order.items && order.items.length > 0) {\n      // Level 2\n      for (const item of order.items) {\n        // Level 3\n        console.log(item.name);\n      }\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Valid: No recursion"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function calculateSum(numbers) {\n  let sum = 0;\n  for (const num of numbers) {\n    sum += num;\n  }\n  return sum;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Invalid: Nesting depth of 4 (exceeds maxNestingDepth: 3)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function checkPermissions(user, resource, action) {\n  if (user) {\n    // Level 1\n    if (user.roles) {\n      // Level 2\n      if (user.roles.includes('admin')) {\n        // Level 3\n        if (resource.isProtected && action === 'delete') {\n          // Level 4 - ERROR\n          console.log('Admin delete allowed');\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"ESLint Warning: Avoid nesting control structures deeper than 3 levels. Current depth: 4."}),"\n",(0,s.jsx)(n.p,{children:"Invalid: Direct recursion (allowRecursion: false)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function countdown(n) {\n  if (n <= 0) {\n    console.log('Blast off!');\n    return;\n  }\n  console.log(n);\n  countdown(n - 1); // ERROR: Direct recursion\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["ESLint Warning: Direct recursion detected in function ",(0,s.jsx)(n.code,{children:"countdown"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Invalid: Lexical recursion (allowRecursion: false)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function outerTask(value) {\n  console.log('Outer task:', value);\n  function innerTask(innerValue) {\n    if (innerValue > 0) {\n      console.log('Inner task, calling outer:', innerValue);\n      outerTask(innerValue - 1); // ERROR: Lexical recursion\n    }\n  }\n  if (value > 0) {\n    innerTask(value);\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["ESLint Warning: Lexical recursion: function ",(0,s.jsx)(n.code,{children:"outerTask"})," is called from an inner scope of ",(0,s.jsx)(n.code,{children:"innerTask"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"hub/minimize-complexflows": ["warn", { "maxNestingDepth": 2, "allowRecursion": false }]'})}),"\n",(0,s.jsx)(n.p,{children:"Valid: Nesting up to 2 levels"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function checkAccess(user) {\n  if (user) {\n    // Level 1\n    if (user.isActive) {\n      // Level 2\n      return true;\n    }\n  }\n  return false;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Invalid: Nesting depth of 3 (exceeds maxNestingDepth: 2)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function processOrder(order) {\n  if (order) {\n    // Level 1\n    if (order.items && order.items.length > 0) {\n      // Level 2\n      for (const item of order.items) {\n        // Level 3 - ERROR\n        console.log(item.name);\n      }\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"ESLint Warning: Avoid nesting control structures deeper than 2 levels. Current depth: 3."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"hub/minimize-complex-flows": ["warn", { "maxNestingDepth": 3, "allowRecursion": true }]'})}),"\n",(0,s.jsx)(n.p,{children:"Valid: Direct recursion is now allowed"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function factorial(n) {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1); // OK, recursion allowed\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Valid: Lexical recursion is now allowed"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function outerWithAllowedRecursion(value) {\n  function innerCallOuter(innerValue) {\n    if (innerValue > 0) {\n      outerWithAllowedRecursion(innerValue - 1); // OK, recursion allowed\n    }\n  }\n  if (value > 0) {\n    innerCallOuter(value);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Valid: Nesting still respects maxNestingDepth"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function normalNestingWithRecursionAllowed(data) {\n  if (data) {\n    // Level 1\n    if (data.value > 0) {\n      // Level 2\n      console.log(data.value);\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Invalid: Nesting depth of 4 (exceeds maxNestingDepth: 3), even if recursion is allowed"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function deeplyNestedButRecursionAllowed(user) {\n  if (user) {\n    // Level 1\n    if (user.profile) {\n      // Level 2\n      if (user.profile.settings) {\n        // Level 3\n        if (user.profile.settings.isActive) {\n          // Level 4 - ERROR\n          console.log('User is active');\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"ESLint Warning: Avoid nesting control structures deeper than 3 levels. Current depth: 4."}),"\n",(0,s.jsx)(n.h3,{id:"2-avoid-runtime-heap-allocation",children:"2. avoid-runtime-heap-allocation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nEncourages efficient memory management by discouraging the creation of new common data structures (arrays [], objects ",", new Map(), new Set(), etc.) directly within function bodies, and especially inside loops. This practice helps to reduce garbage collection pressure and improve performance."]}),"\n",(0,s.jsx)(n.p,{children:"Okay, I understand! You want the documentation for avoid-runtime-heap-allocation formatted precisely like the Docusaurus-style Markdown you provided for the minimize-complex-flows rule."}),"\n",(0,s.jsx)(n.p,{children:"Here's the documentation for node/avoid-runtime-heap-allocation in that format:"}),"\n",(0,s.jsxs)(n.p,{children:["node/avoid-runtime-heap-allocation\nDescription:\nEncourages efficient memory management by discouraging the creation of new common data structures (arrays [], objects ",", new Map(), new Set(), etc.) directly within function bodies, and especially inside loops. This practice helps to reduce garbage collection pressure and improve performance."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rationale"}),": Frequent dynamic memory allocations and deallocations during an application's runtime can lead to several performance issues. These include general performance degradation due to the overhead of memory management, excessive garbage collection (GC) cycles which can pause application execution, and memory fragmentation. Over time, fragmentation can make it difficult for the system to find contiguous blocks of memory, even if sufficient total memory is free. Keeping memory usage predictable and minimizing runtime allocations are crucial for long-running, resource-intensive, or real-time applications, ensuring smoother operation and stability. This rule promotes pre-allocation and reuse of data structures where feasible."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Options"}),": The rule accepts a single object with the following properties:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"checkLoopsOnly"})}),"\n",(0,s.jsx)(n.p,{children:"Type: boolean\nDescription: If set to true, the rule will only flag allocations that occur inside loops within functions. If false (default), it flags any such allocation found anywhere inside a function body (outside of module scope).\nDefault: false\nExample Usage:\nJSON"}),"\n",(0,s.jsx)(n.p,{children:"In your ESLint config rules section:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\nrules: {"hub/avoid-runtime-heap-allocation": ["warn", { "checkLoopsOnly": true }]\n}\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"allowedConstructs"})}),"\n",(0,s.jsx)(n.p,{children:"Type: array of string\nDescription: A list of constructor names that should be exempt from this rule, allowing their allocation at runtime without warning.\nDefault: [] (empty array, meaning all targeted constructs are checked by default)\nEnum Values: 'Array', 'Object', 'Map', 'Set', 'WeakMap', 'WeakSet'\nExample Usage:\nJSON"}),"\n",(0,s.jsx)(n.p,{children:"// In your ESLint config rules section:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n rules: { "hub/avoid-runtime-heap-allocation":    ["warn", { "allowedConstructs": ["Map", "Set"] }]\n}\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Example of Full Configuration in eslint.config.js:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JavaScript",children:'// eslint.config.js\n// Assuming \'hubPlugin\' is your imported plugin \'@mindfiredigital/eslint-plugin-hub\'\n// ... other imports and configurations ...\n{\nplugins: {\n"hub": hubPlugin,\n},\nrules: {\n"hub/avoid-runtime-heap-allocation": ["warn", {\n"checkLoopsOnly": false, // Example: check everywhere in functions\n"allowedConstructs": ["Set"] // Example: Allow \'new Set()\'\n}],\n// ... other rules\n}\n}\n// ...\n'})}),"\n",(0,s.jsx)(n.p,{children:"These two options (checkLoopsOnly and allowedConstructs) give you control over how strictly the avoid-runtime-heap-allocation rule operates in your project."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"hub/avoid-runtime-heap-allocation": ["warn"] which implies { "checkLoopsOnly": false, "allowedConstructs": [] }'})}),"\n",(0,s.jsx)(n.p,{children:"Valid (Should NOT produce warnings from this rule):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Module-scope allocations are fine\nconst globalArray = [];\nconst globalObject = {};\n\nfunction usesGlobalArray(data) {\n  globalArray.length = 0; // Modifying, not re-allocating\n  globalArray.push(...data);\n}\n\n// Empty array/object as default parameter (ignored by rule heuristic)\nfunction processItems(items = []) {\n  console.log(items);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Invalid (Should PRODUCE warnings from this rule):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Allocation in a function\nfunction processData(data) {\n  const tempResults = []; // Invalid: allocationInFunction\n  data.forEach(item => tempResults.push(item * 2));\n  return tempResults;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"ESLint Warning: Runtime allocation of 'Array' ([]) detected in function processData. Consider pre-allocating and reusing, especially if this function is called frequently or is performance-sensitive."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JavaScript",children:"function createConfig() {\n  const config = { active: true, mode: 'test' }; // Invalid: allocationInFunction\n  return config;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"ESLint Warning: Runtime allocation of 'Object' ({ active: true, mode: '...}) detected in function createConfig. Consider pre-allocating and reusing, especially if this function is called frequently or is performance-sensitive."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javaScript",children:"// Allocation in a loop within a function\nfunction processBatch(batch) {\n  for (let i = 0; i < batch.length; i++) {\n    const itemSpecificData = [batch[i].id, batch[i].value]; // Invalid: allocationInLoop\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"ESLint Warning: Runtime allocation of 'Array' ([batch[i].id, batch[i]...]) detected inside a loop within function processBatch. This can severely impact performance. Pre-allocate and reuse this structure."})}),"\n",(0,s.jsxs)(n.p,{children:["Scenario 2: Option checkLoopsOnly: true\n",(0,s.jsx)(n.code,{children:'("hub/avoid-runtime-heap-allocation": ["warn", { "checkLoopsOnly": true }])'})]}),"\n",(0,s.jsx)(n.p,{children:"Valid (Should NOT produce warnings from this rule):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javaScript",children:"// Allocation in a function, but NOT in a loop, is now VALID\nfunction processData(data) {\n  const tempResults = []; // Valid with checkLoopsOnly: true\n  data.forEach(item => tempResults.push(item * 2));\n  return tempResults;\n}\nInvalid (Should PRODUCE warnings from this rule):\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javaScript",children:"// Allocation in a loop within a function is still INVALID\nfunction processBatchWithLoopCheck(batch) {\n  const initialItems = []; // This is VALID with checkLoopsOnly: true\n  for (let i = 0; i < batch.length; i++) {\n    const itemSpecificData = { id: batch[i].id }; // Invalid: allocationInLoop\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"ESLint Warning: Runtime allocation of 'Object' ({ id: batch[i].id }) detected inside a loop within function processBatchWithLoopCheck. This can severely impact performance. Pre-allocate and reuse this structure."})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'Scenario 3: Option allowedConstructs: [\'Map\'] ("hub/node/avoid-runtime-heap-allocation": ["warn", { "allowedConstructs": ["Map"] }])'})}),"\n",(0,s.jsx)(n.p,{children:"Valid (Should NOT produce warnings from this rule for Map):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javaScript",children:"function useAllowedTypes() {\n  const myMap = new Map(); // Valid: Map is in allowedConstructs\n\n  for (let i = 0; i < 2; i++) {\n    const mapInLoop = new Map(); // Valid: Map is in allowedConstructs\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Invalid (Should PRODUCE warnings from this rule for Array/Object):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javaScript",children:"function useMixedTypes() {\n  const myMap = new Map(); // Valid: Map is in allowedConstructs\n  const myArray = [];      // Invalid: allocationInFunction for Array\n\n  for (let i = 0; i < 2; i++) {\n    const objInLoop = { index: i }; // Invalid: allocationInLoop for Object\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"ESLint Warning: Runtime allocation of 'Array' ([]) detected in function useMixedTypes. Consider pre-allocating and reusing, especially if this function is called frequently or is performance-sensitive. ESLint Warning: Runtime allocation of 'Object' ({ index: i }) detected inside a loop within function useMixedTypes. This can severely impact performance. Pre-allocate and reuse this structure."})}),"\n",(0,s.jsx)(n.h3,{id:"3-fixed-loop-bounds",children:"3. fixed-loop-bounds"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nThis rule helps prevent infinite loops by ensuring that ",(0,s.jsx)(n.code,{children:"while"}),", ",(0,s.jsx)(n.code,{children:"do...while"}),", and ",(0,s.jsx)(n.code,{children:"for"})," loops have clearly defined and reachable termination conditions. It specifically targets loops that use ",(0,s.jsx)(n.code,{children:"true"})," as a condition or rely on external flags that are not modified within the loop body."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rationale:"}),"\nInfinite loops can cause applications to hang, consume excessive resources, and are a common source of bugs. Statically analyzing loop conditions helps catch these potential issues early."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Options:"}),"\nThe rule accepts an object with the following optional properties:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"disallowInfiniteWhile"})," (boolean, default: ",(0,s.jsx)(n.code,{children:"true"}),"): If true, flags ",(0,s.jsx)(n.code,{children:"while(true)"}),", ",(0,s.jsx)(n.code,{children:"do...while(true)"}),", ",(0,s.jsx)(n.code,{children:"for(;;)"}),", and ",(0,s.jsx)(n.code,{children:"for(;true;)"})," loops that do not have an effective break statement within their body."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"disallowExternalFlagLoops"})," (boolean, default: ",(0,s.jsx)(n.code,{children:"true"}),"): If true, flags ",(0,s.jsx)(n.code,{children:"while"})," or ",(0,s.jsx)(n.code,{children:"do...while"})," loops whose condition is an identifier (or its negation like ",(0,s.jsx)(n.code,{children:"!flag"}),") that is not reassigned or updated within the loop's body."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Important Implementation Details:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The rule performs static analysis to detect ",(0,s.jsx)(n.code,{children:"break"})," statements that effectively terminate the loop"]}),"\n",(0,s.jsx)(n.li,{children:"It handles labeled break statements correctly"}),"\n",(0,s.jsx)(n.li,{children:"It ignores breaks inside nested functions as they don't affect the outer loop"}),"\n",(0,s.jsxs)(n.li,{children:["For external flag detection, it checks for assignment expressions (",(0,s.jsx)(n.code,{children:"flag = value"}),") and update expressions (",(0,s.jsx)(n.code,{children:"flag++"}),", ",(0,s.jsx)(n.code,{children:"++flag"}),", ",(0,s.jsx)(n.code,{children:"flag--"}),", ",(0,s.jsx)(n.code,{children:"--flag"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"Modifications inside nested functions are not considered as they operate in different scopes"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples of Incorrect Code:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Incorrect: while(true) without a break\nwhile (true) {\n  console.log('potentially infinite');\n  // No break statement found\n}\n\n// Incorrect: for(;;) without a break\nfor (;;) {\n  // This loop will run forever\n  performTask();\n}\n\n// Incorrect: for loop with true condition but no break\nfor (; true; ) {\n  console.log('infinite loop');\n}\n\n// Incorrect: External flag not modified within the loop\nlet keepRunning = true;\nwhile (keepRunning) {\n  // 'keepRunning' is never set to false inside this loop\n  performTask();\n}\n\n// Incorrect: Negated flag condition not modified\nlet shouldStop = false;\nwhile (!shouldStop) {\n  // 'shouldStop' is never set to true inside this loop\n  doWork();\n}\n\n// Incorrect: do-while with true condition and no break\ndo {\n  processData();\n} while (true); // No break statement in the body\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples of Correct Code:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Correct: while(true) with a break\nwhile (true) {\n  if (conditionMet()) {\n    break;\n  }\n  console.log('looping');\n}\n\n// Correct: for loop with a clear condition\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n}\n\n// Correct: External flag modified within the loop (assignment)\nlet processNext = true;\nwhile (processNext) {\n  if (!processItem()) {\n    processNext = false; // Flag is modified via assignment\n  }\n}\n\n// Correct: External flag modified within the loop (update expression)\nlet counter = 10;\nwhile (counter) {\n  performTask();\n  counter--; // Flag is modified via update expression\n}\n\n// Correct: Labeled break statement\nouterLoop: while (true) {\n  for (let i = 0; i < 5; i++) {\n    if (shouldExit()) {\n      break outerLoop; // Correctly targets the outer loop\n    }\n  }\n}\n\n// Correct: Break inside nested scope but not nested function\nwhile (true) {\n  {\n    if (condition) {\n      break; // This break correctly exits the while loop\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"When Not To Use It:"}),"\nYou might consider disabling ",(0,s.jsx)(n.code,{children:"disallowExternalFlagLoops"})," if you have loops where the controlling flag is intentionally modified by asynchronous operations or in a deeply nested utility function whose side effects on the flag are not easily detectable by static analysis (though this is generally an anti-pattern for loop control)."]}),"\n",(0,s.jsx)(n.h3,{id:"4-no-disable-important-rules",children:"4. no-disable-important-rules"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nThis rule discourages the use of ESLint disable comments (",(0,s.jsx)(n.code,{children:"/* eslint-disable */"}),", ",(0,s.jsx)(n.code,{children:"// eslint-disable-line"}),", ",(0,s.jsx)(n.code,{children:"// eslint-disable-next-line"}),") in two scenarios:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"When they are used to disable all rules (blanket disable)."}),"\n",(0,s.jsx)(n.li,{children:'When they are used to disable a specific set of predefined "important" rules.'}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The default important rules are: ",(0,s.jsx)(n.code,{children:"no-unused-vars"}),", ",(0,s.jsx)(n.code,{children:"no-console"}),", ",(0,s.jsx)(n.code,{children:"no-undef"}),", and ",(0,s.jsx)(n.code,{children:"eqeqeq"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rationale:"}),"\nWarnings from linters and compilers often highlight potential bugs, performance issues, or security vulnerabilities. Disabling these warnings without addressing the underlying issue can lead to technical debt and more significant problems later. This rule encourages developers to fix warnings or, if a disable is truly necessary, to be specific and provide justification."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Options:"}),"\nThe rule accepts an object with the following optional property:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"importantRules"}),' (array of strings): Allows you to override the default list of "important" rule names that should not be disabled.',"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default important rules:"})," ",(0,s.jsx)(n.code,{children:"['no-unused-vars', 'no-console', 'no-undef', 'eqeqeq']"})]}),"\n",(0,s.jsxs)(n.li,{children:["Example: ",(0,s.jsx)(n.code,{children:'importantRules: ["no-debugger", "my-plugin/my-critical-rule"]'})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Supported Disable Directives:"}),"\nThe rule detects and analyzes the following ESLint disable comment patterns:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/* eslint-disable */"})," - Blanket disable (always flagged)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/* eslint-disable-line */"})," - Blanket disable for current line (always flagged)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/* eslint-disable-next-line */"})," - Blanket disable for next line (always flagged)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/* eslint-disable rule-name */"}),' - Specific rule disable (flagged if rule is "important")']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/* eslint-disable rule-a, rule-b */"})," - Multiple specific rules (each checked individually)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples of Incorrect Code:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"/* eslint-disable */ // INCORRECT: Blanket disable of all rules\nfunction messyCode() {\n  var x = 10; // Would normally warn for 'no-unused-vars'\n  console.log('Debug message left in code'); // Would normally warn for 'no-console'\n}\n\n// eslint-disable-next-line\nconst anotherBlanket = true; // INCORRECT: Blanket disable for the next line\n\n// eslint-disable-line\nconst yetAnother = false; // INCORRECT: Blanket disable for current line\n\n// eslint-disable-next-line no-unused-vars\nconst myVar = 'I am actually used later'; // INCORRECT: Disabling an important rule\n\n/* eslint-disable no-console, no-undef */ // INCORRECT: Disabling multiple important rules\nconsole.info('This should be logged via a proper logger');\nsomeUndefinedVariable = value;\n/* eslint-enable no-console, no-undef */\n\n// eslint-disable-next-line eqeqeq\nif (value == 'test') {\n  // INCORRECT: Disabling important rule 'eqeqeq'\n  doSomething();\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples of Correct Code:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Correct: No disable comments, addressing issues directly\nfunction cleanCode() {\n  const x = 10;\n  logger.info('Using proper logging instead of console'); // Fixed instead of disabled\n  return x; // Using the variable instead of leaving it unused\n}\n\n// Correct: Disabling a specific, non-important rule with justification\n// eslint-disable-next-line some-other-plugin/some-specific-rule -- Justification for this specific case\ndoSomethingSpecific();\n\n// Correct: Using strict equality instead of disabling eqeqeq\nif (value === 'test') {\n  // Fixed the == vs === issue\n  doSomething();\n}\n\n// Correct: Properly declaring variables instead of disabling no-undef\nconst someVariable = 'defined value'; // Declared instead of leaving undefined\n\n// Correct: Using the variable instead of disabling no-unused-vars\nconst importantData = fetchData();\nprocessData(importantData); // Actually using the variable\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Best Practices:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Strict ESLint/TS Compiler Setups:"})," Projects should aim for the strictest possible ESLint configurations and TypeScript compiler options (e.g., ",(0,s.jsx)(n.code,{children:"strict: true"})," in ",(0,s.jsx)(n.code,{children:"tsconfig.json"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Address Warnings Early:"})," Treating warnings as errors forces developers to address them immediately, preventing technical debt."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Document Disable Reasons:"})," Any ",(0,s.jsx)(n.code,{children:"eslint-disable"})," comment should be accompanied by a clear explanation of why it's necessary."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"When Not To Use It:"}),'\nThis rule might be overly restrictive during initial project scaffolding or large refactors. In such cases, it can be temporarily set to "warn" or disabled, but should be re-enabled as soon as possible.']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nEnforces best practices for data scoping, such as avoiding global object modification and preferring narrower variable scopes."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rationale:"}),"\nProper data scoping helps prevent naming conflicts, makes code more maintainable, and reduces the risk of unintended side effects."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples of Incorrect Code:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Incorrect: Modifying global objects\nglobal.myVariable = 'value';\n\n// Incorrect: Using var in block scope where let/const would be better\nif (condition) {\n  var result = processData();\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples of Correct Code:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Correct: Using appropriate scoping\nif (condition) {\n  const result = processData();\n  // Use result within this scope\n}\n\n// Correct: Avoiding global modifications\nconst config = {\n  myVariable: 'value',\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"5-limit-data-scope",children:"5. limit-data-scope"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": Enforces several best practices for data scoping to improve code maintainability and prevent common JavaScript pitfalls. This rule helps developers write cleaner, more organized code by discouraging global object modifications, encouraging proper variable scoping, and promoting modern variable declarations."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rationale"}),": Poor data scoping practices lead to hard-to-maintain code, namespace pollution, and subtle bugs. Global object modifications can cause conflicts between different parts of an application or third-party libraries. Variables declared in overly broad scopes create unnecessary coupling and make code harder to understand and refactor. The ",(0,s.jsx)(n.code,{children:"var"})," keyword's function-scoping behavior is often counterintuitive and can lead to hoisting-related bugs."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"This rule enforces three key practices:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No Global Object Modification"}),": Prevents direct modification of global objects like ",(0,s.jsx)(n.code,{children:"window"}),", ",(0,s.jsx)(n.code,{children:"global"}),", and ",(0,s.jsx)(n.code,{children:"globalThis"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Narrowest Scope"}),": Suggests moving variables to their most restrictive scope when they're only used within a single function"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modern Variable Declarations"}),": Discourages ",(0,s.jsx)(n.code,{children:"var"})," usage in favor of ",(0,s.jsx)(n.code,{children:"let"})," and ",(0,s.jsx)(n.code,{children:"const"})]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h4,{id:"-valid-code-should-not-produce-warnings",children:"\u2705 Valid Code (Should NOT produce warnings)"}),"\n",(0,s.jsx)(n.h4,{id:"no-global-object-modification",children:"No Global Object Modification"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Reading from global objects is allowed\nconst config = window.location || {};\nconsole.log(global.process);\nconst val = globalThis.crypto;\n\n// Modifying local objects is fine\nconst myVar = {};\nmyVar.prop = 1;\n\n// Shadowed global variables are allowed\nfunction foo() {\n  let window = {};\n  window.bar = 1; // This 'window' is local, not global\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"proper-variable-scoping",children:"Proper Variable Scoping"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Variable used in multiple functions - correctly at module level\nconst sharedVar = 10;\nfunction funcA() {\n  console.log(sharedVar);\n}\nfunction funcB() {\n  console.log(sharedVar);\n}\n\n// Variable used at module scope - correctly placed\nconst moduleVar = 20;\nconsole.log(moduleVar); // Used at module scope\nfunction useIt() {\n  console.log(moduleVar);\n}\n\n// Variable already in narrowest scope\nfunction doSomething() {\n  const localVar = 30; // Already in narrowest scope\n  console.log(localVar);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"modern-variable-declarations",children:"Modern Variable Declarations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Use let and const instead of var\nlet x = 1;\nconst y = 2;\nfor (let i = 0; i < 5; i++) {}\n\nfunction test() {\n  const local = 1;\n  return local;\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-invalid-code-should-produce-warnings",children:"\u274c Invalid Code (Should PRODUCE warnings)"}),"\n",(0,s.jsx)(n.h4,{id:"global-object-modification",children:"Global Object Modification"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// ESLint Error: Avoid modifying the global object "window". "myCustomProperty" should not be added globally.\nwindow.myCustomProperty = 123;\n\n// ESLint Error: Avoid modifying the global object "global". "debug" should not be added globally.\nglobal.debug = true;\n\n// ESLint Error: Avoid modifying the global object "globalThis". "newProperty" should not be added globally.\nglobalThis[\'newProperty\'] = \'value\';\n\n// ESLint Error: Avoid modifying the global object "window". "customHandler" should not be added globally.\nfunction setup() {\n  window.customHandler = function () {};\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"variables-in-overly-broad-scope",children:"Variables in Overly Broad Scope"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// ESLint Warning: Variable 'onlyInFuncA' is declared in module scope but appears to be used only within the 'funcA' function scope. Consider moving its declaration into the 'funcA' scope.\nconst onlyInFuncA = 100;\nfunction funcA() {\n  console.log(onlyInFuncA); // Only used here\n}\nfunction funcB() {\n  /* does not use onlyInFuncA */\n}\n\n// ESLint Warning: Variable 'configValue' is declared in module scope but appears to be used only within the 'initialize' function scope. Consider moving its declaration into the 'initialize' scope.\nlet configValue;\nfunction initialize() {\n  configValue = { setting: true };\n  console.log(configValue);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"using-var-instead-of-letconst",children:"Using var Instead of let/const"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// ESLint Warning: Prefer 'let' or 'const' over 'var' for variable 'z'.\nvar z = 3;\n\n// ESLint Warning: Prefer 'let' or 'const' over 'var' for variable 'count'.\nfunction oldStyle() {\n  var count = 0;\n  return count;\n}\n\n// ESLint Warning: Prefer 'let' or 'const' over 'var' for variable 'i'.\nfor (var i = 0; i < 10; i++) {\n  console.log(i);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"combined-violations",children:"Combined Violations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Multiple violations in one code block\nvar utilityData = { helper: true }; // var usage violation\nfunction doWork() {\n  window.workResult = utilityData.helper; // global modification + scope violation\n}\n// ESLint Warnings:\n// 1. Prefer 'let' or 'const' over 'var' for variable 'utilityData'\n// 2. Variable 'utilityData' should be moved to narrower scope\n// 3. Avoid modifying the global object \"window\"\n"})}),"\n",(0,s.jsx)(n.h4,{id:"when-to-disable",children:"When to Disable"}),"\n",(0,s.jsx)(n.p,{children:"Consider disabling this rule in specific cases:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"/* eslint-disable hub/limit-data-scope */\n// Legitimate polyfill or library initialization\nif (!window.customLibrary) {\n  window.customLibrary = {\n    version: '1.0.0',\n    init: function () {\n      /* ... */\n    },\n  };\n}\n/* eslint-enable hub/limit-data-scope */\n"})}),"\n",(0,s.jsx)(n.h4,{id:"recommended-patterns",children:"Recommended Patterns"}),"\n",(0,s.jsx)(n.h4,{id:"-instead-of-global-modifications",children:"\u2705 Instead of Global Modifications"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Use proper module exports/imports\nexport const myUtility = {\n  customProperty: 123,\n  debug: true,\n};\n\n// Or use proper configuration patterns\nconst config = {\n  apiUrl: process.env.API_URL || 'https://api.example.com',\n  debug: process.env.NODE_ENV !== 'production',\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-instead-of-broad-scoping",children:"\u2705 Instead of Broad Scoping"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Move variables to narrowest scope\nfunction processData() {\n  const localData = { processed: false }; // Declared where used\n\n  if (someCondition) {\n    localData.processed = true;\n    console.log(localData);\n  }\n\n  return localData;\n}\n\n// Use function parameters instead of outer variables\nfunction processItem(item) {\n  // Parameter instead of module-level variable\n  return item.value * 2;\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-instead-of-var",children:"\u2705 Instead of var"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Use const for values that won't be reassigned\nconst PI = 3.14159;\nconst users = [];\n\n// Use let for values that will be reassigned\nlet counter = 0;\nlet currentUser = null;\n\n// Use proper block scoping\nif (condition) {\n  const blockScoped = getValue(); // Won't leak outside block\n  processValue(blockScoped);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"benefits",children:"Benefits"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Prevents Namespace Pollution"}),": Avoids conflicts with other code and libraries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Improves Code Organization"}),": Encourages proper scoping and separation of concerns"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reduces Bugs"}),": Eliminates var-related hoisting issues and accidental global modifications"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enhances Maintainability"}),": Makes code easier to understand and refactor"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Promotes Modern JavaScript"}),": Encourages use of ES6+ features and best practices"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better IDE Support"}),": Modern variable declarations provide better IntelliSense and error detection"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"6-limit-reference-depth",children:"6. limit-reference-depth"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": Limits the depth of chained property access and enforces optional chaining to prevent runtime errors. This rule helps avoid brittle code that can crash when encountering null or undefined values in property chains, encouraging safer access patterns and better error handling."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rationale"}),": Deep chains of property access (e.g., ",(0,s.jsx)(n.code,{children:"obj.a.b.c.d.e"}),") without proper validation are error-prone and lead to brittle code. Null or undefined values anywhere in the chain can cause runtime crashes, especially in large codebases or when dealing with unpredictable data shapes (e.g., JSON APIs, external configurations). This rule enforces safer patterns by limiting chain depth and requiring optional chaining (",(0,s.jsx)(n.code,{children:"?."}),") or proper null checks, reducing ",(0,s.jsx)(n.code,{children:"TypeError: Cannot read property 'x' of undefined"})," issues and making code more maintainable."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Options"}),": The rule accepts a single object with the following properties:"]}),"\n",(0,s.jsx)(n.h4,{id:"maxdepth",children:(0,s.jsx)(n.code,{children:"maxDepth"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": Maximum allowed depth for property access chains. A depth of 1 means ",(0,s.jsx)(n.code,{children:"obj.prop"}),", depth of 2 means ",(0,s.jsx)(n.code,{children:"obj.prop.subprop"}),", etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"3"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/limit-reference-depth": ["warn", { "maxDepth": 2 }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"requireoptionalchaining",children:(0,s.jsx)(n.code,{children:"requireOptionalChaining"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": When ",(0,s.jsx)(n.code,{children:"true"}),", requires the use of optional chaining (",(0,s.jsx)(n.code,{children:"?."}),") for all property access beyond the first level."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/limit-reference-depth": ["warn", { "requireOptionalChaining": false }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"allowsinglepropertyaccess",children:(0,s.jsx)(n.code,{children:"allowSinglePropertyAccess"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": When ",(0,s.jsx)(n.code,{children:"true"}),", allows single-level property access without optional chaining (e.g., ",(0,s.jsx)(n.code,{children:"obj.prop"})," is allowed, but ",(0,s.jsx)(n.code,{children:"obj.prop.subprop"})," still requires ",(0,s.jsx)(n.code,{children:"obj.prop?.subprop"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"false"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/limit-reference-depth": ["warn", { "allowSinglePropertyAccess": true }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"ignoredbases",children:(0,s.jsx)(n.code,{children:"ignoredBases"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"array of string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": Array of base identifier names that should be exempt from this rule's checks."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"[]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/limit-reference-depth": ["warn", { "ignoredBases": ["config", "env"] }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"ignorecallexpressions",children:(0,s.jsx)(n.code,{children:"ignoreCallExpressions"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": When ",(0,s.jsx)(n.code,{children:"true"}),", ignores property chains that end with function calls."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/limit-reference-depth": ["warn", { "ignoreCallExpressions": false }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"ignoreimportedmodules",children:(0,s.jsx)(n.code,{children:"ignoreImportedModules"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": When ",(0,s.jsx)(n.code,{children:"true"}),", ignores property access on imported/required modules."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/limit-reference-depth": ["warn", { "ignoreImportedModules": false }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"ignoreglobals",children:(0,s.jsx)(n.code,{children:"ignoreGlobals"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": When ",(0,s.jsx)(n.code,{children:"true"}),", ignores property access on global objects like ",(0,s.jsx)(n.code,{children:"Math"}),", ",(0,s.jsx)(n.code,{children:"JSON"}),", ",(0,s.jsx)(n.code,{children:"console"}),", etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/limit-reference-depth": ["warn", { "ignoreGlobals": false }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"ignorecommonpatterns",children:(0,s.jsx)(n.code,{children:"ignoreCommonPatterns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": When ",(0,s.jsx)(n.code,{children:"true"}),", ignores common safe patterns like ",(0,s.jsx)(n.code,{children:"this"}),", ",(0,s.jsx)(n.code,{children:"super"}),", ",(0,s.jsx)(n.code,{children:"module"}),", ",(0,s.jsx)(n.code,{children:"exports"}),", etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/limit-reference-depth": ["warn", { "ignoreCommonPatterns": false }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"example-configuration",children:"Example Configuration"}),"\n",(0,s.jsxs)(n.h4,{id:"full-configuration-in-eslintconfigjs",children:["Full Configuration in ",(0,s.jsx)(n.code,{children:"eslint.config.js"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// eslint.config.js\n// Assuming \'hubPlugin\' is your imported plugin \'@mindfiredigital/eslint-plugin-hub\'\n{\n  plugins: {\n    "hub": hubPlugin,\n  },\n  rules: {\n    "hub/limit-reference-depth": ["warn", {\n      "maxDepth": 2,\n      "requireOptionalChaining": true,\n      "allowSinglePropertyAccess": false,\n      "ignoredBases": ["config"],\n      "ignoreCallExpressions": true,\n      "ignoreImportedModules": true,\n      "ignoreGlobals": true,\n      "ignoreCommonPatterns": true\n    }],\n    // ... other rules\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"examples-1",children:"Examples"}),"\n",(0,s.jsx)(n.h4,{id:"scenario-1-default-configuration",children:"Scenario 1: Default Configuration"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:'"hub/limit-reference-depth": ["warn"]'})," (implies all default options)"]}),"\n",(0,s.jsx)(n.h4,{id:"-valid-should-not-produce-warnings",children:"\u2705 Valid (Should NOT produce warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Optional chaining from the start\nconst name = item?.details?.name;\nconst value = obj?.a?.b?.c; // Within maxDepth of 3\n\n// Computed properties with optional chaining\nconst prop = obj?.[key]?.[subkey];\n\n// Function calls with optional chaining\nconst result = getUser()?.profile?.name;\n\n// Global objects (ignored by default)\nconst pi = Math.PI;\nconst data = JSON.parse(str);\n\n// Import/require usage (ignored by default)\nimport lodash from 'lodash';\nconst result = lodash.get(obj, 'path');\n\n// Common patterns (ignored by default)\nconst value = this.property;\nconst exp = module.exports;\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-invalid-should-produce-warnings",children:"\u274c Invalid (Should PRODUCE warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Missing optional chaining\nconst name = item.details.name;\n// ESLint Warning: Optional chaining (?.) should be used for accessing property 'details' in 'item.details'.\n\n// Exceeding maxDepth\nconst deep = obj?.a?.b?.c?.d; // depth 4 > maxDepth 3\n// ESLint Warning: Property access chain 'obj?.a?.b?.c?.d' (depth 4) exceeds the maximum allowed depth of 3.\n\n// Mixed optional and non-optional chaining\nconst mixed = obj?.a.b?.c;\n// ESLint Warning: Optional chaining (?.) should be used for accessing property 'b' in 'obj?.a.b'.\n\n// Function calls without optional chaining\nconst result = getUser().profile.name;\n// ESLint Warning: Optional chaining (?.) should be used for accessing property 'profile' in 'getUser().profile'.\n"})}),"\n",(0,s.jsx)(n.h4,{id:"scenario-2-relaxed-optional-chaining",children:"Scenario 2: Relaxed Optional Chaining"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"hub/limit-reference-depth": ["warn", { "requireOptionalChaining": false }]'})}),"\n",(0,s.jsx)(n.h4,{id:"-valid-should-not-produce-warnings-1",children:"\u2705 Valid (Should NOT produce warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Regular property access allowed\nconst name = item.details.name;\nconst value = obj.a.b.c; // Still within maxDepth\n\n// Mixed patterns allowed\nconst mixed = obj.a?.b.c;\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-invalid-should-produce-warnings-1",children:"\u274c Invalid (Should PRODUCE warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Still enforces maxDepth\nconst deep = obj.a.b.c.d; // depth 4 > maxDepth 3\n// ESLint Warning: Property access chain 'obj.a.b.c.d' (depth 4) exceeds the maximum allowed depth of 3.\n"})}),"\n",(0,s.jsx)(n.h4,{id:"scenario-3-allow-single-property-access",children:"Scenario 3: Allow Single Property Access"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"hub/limit-reference-depth": ["warn", { "allowSinglePropertyAccess": true }]'})}),"\n",(0,s.jsx)(n.h4,{id:"-valid-should-not-produce-warnings-2",children:"\u2705 Valid (Should NOT produce warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Single property access without optional chaining\nconst value = obj.prop;\n\n// But deeper access still requires optional chaining\nconst name = item.details?.name;\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-invalid-should-produce-warnings-2",children:"\u274c Invalid (Should PRODUCE warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Second level and beyond still need optional chaining\nconst name = item.details.name;\n// ESLint Warning: Optional chaining (?.) should be used for accessing property 'name' in 'item.details.name'.\n"})}),"\n",(0,s.jsx)(n.h4,{id:"scenario-4-custom-maxdepth",children:"Scenario 4: Custom maxDepth"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"hub/limit-reference-depth": ["warn", { "maxDepth": 2 }]'})}),"\n",(0,s.jsx)(n.h4,{id:"-valid-should-not-produce-warnings-3",children:"\u2705 Valid (Should NOT produce warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Within maxDepth of 2\nconst value = obj?.a?.b;\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-invalid-should-produce-warnings-3",children:"\u274c Invalid (Should PRODUCE warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Exceeds maxDepth of 2\nconst deep = obj?.a?.b?.c; // depth 3 > maxDepth 2\n// ESLint Warning: Property access chain 'obj?.a?.b?.c' (depth 3) exceeds the maximum allowed depth of 2.\n"})}),"\n",(0,s.jsx)(n.h4,{id:"scenario-5-custom-ignored-bases",children:"Scenario 5: Custom Ignored Bases"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"hub/limit-reference-depth": ["warn", { "ignoredBases": ["config", "env"] }]'})}),"\n",(0,s.jsx)(n.h4,{id:"-valid-should-not-produce-warnings-4",children:"\u2705 Valid (Should NOT produce warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Ignored bases can have deep access\nconst setting = config.database.connection.host;\nconst path = env.NODE_ENV.development.settings;\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-invalid-should-produce-warnings-4",children:"\u274c Invalid (Should PRODUCE warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Non-ignored bases still follow rules\nconst value = data.nested.deep.property;\n// ESLint Warning: Optional chaining (?.) should be used for accessing property 'nested' in 'data.nested'.\n"})}),"\n",(0,s.jsx)(n.h4,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h4,{id:"-recommended-patterns",children:"\u2705 Recommended Patterns:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Use optional chaining for safe access\nfunction getItemName(item) {\n  return item?.details?.name || 'Unnamed Item';\n}\n\n// Destructuring with defaults\nconst { name = 'Unknown' } = item?.details ?? {};\n\n// Early validation\nfunction processUser(user) {\n  if (!user?.profile?.settings) {\n    throw new Error('Invalid user data');\n  }\n  return user.profile.settings.theme;\n}\n\n// Utility functions for complex access\nfunction getNestedValue(obj, path, defaultValue) {\n  return (\n    path.split('.').reduce((current, key) => current?.[key], obj) ??\n    defaultValue\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-patterns-to-avoid",children:"\u274c Patterns to Avoid:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Deep chains without safety\nreturn item.details.name.value.label; // Brittle, can crash\n\n// Long chains even with optional chaining\nreturn config?.env?.settings?.meta?.internal?.key?.value; // Too complex\n\n// Mixed safe/unsafe patterns\nreturn user?.profile.settings.theme; // Inconsistent safety\n"})}),"\n",(0,s.jsx)(n.h3,{id:"7-keep-functions-concise",children:"7. keep-functions-concise"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": Enforces a maximum number of lines per function to promote clean, modular code and better maintainability. This rule helps prevent monolithic functions that are hard to read, test, and debug by encouraging developers to break down large functions into smaller, focused, and reusable helper functions."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rationale"}),": Large, monolithic functions are a common source of technical debt and bugs. They often mix multiple responsibilities, making them difficult to understand, test, and maintain. Functions that span dozens or hundreds of lines become cognitive burdens that slow down development and increase the likelihood of errors. This rule enforces a configurable line limit to encourage separation of concerns, improve code readability, and make functions more testable and maintainable."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Options"}),": The rule accepts a single object with the following properties:"]}),"\n",(0,s.jsx)(n.h4,{id:"maxlines",children:(0,s.jsx)(n.code,{children:"maxLines"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": Maximum allowed number of lines per function (including function declarations, arrow functions, and function expressions)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"60"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Minimum"}),": ",(0,s.jsx)(n.code,{children:"0"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/keep-functions-concise": ["warn", { "maxLines": 50 }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"skipblanklines",children:(0,s.jsx)(n.code,{children:"skipBlankLines"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": When ",(0,s.jsx)(n.code,{children:"true"}),", blank lines are not counted toward the line limit."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"false"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/keep-functions-concise": ["warn", { "skipBlankLines": true }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"skipcomments",children:(0,s.jsx)(n.code,{children:"skipComments"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": When ",(0,s.jsx)(n.code,{children:"true"}),", comment-only lines are not counted toward the line limit. This includes single-line comments (",(0,s.jsx)(n.code,{children:"//"}),") and single-line block comments (",(0,s.jsx)(n.code,{children:"/* */"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"false"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/keep-functions-concise": ["warn", { "skipComments": true }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"example-configuration-1",children:"Example Configuration"}),"\n",(0,s.jsxs)(n.h4,{id:"full-configuration-in-eslintconfigjs-1",children:["Full Configuration in ",(0,s.jsx)(n.code,{children:"eslint.config.js"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// eslint.config.js\n// Assuming \'hubPlugin\' is your imported plugin \'@mindfiredigital/eslint-plugin-hub\'\n{\n  plugins: {\n    "hub": hubPlugin,\n  },\n  rules: {\n    "hub/keep-functions-concise": ["warn", {\n      "maxLines": 60,\n      "skipBlankLines": true,\n      "skipComments": true\n    }],\n    // ... other rules\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"examples-2",children:"Examples"}),"\n",(0,s.jsx)(n.h4,{id:"scenario-1-default-configuration-1",children:"Scenario 1: Default Configuration"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:'"hub/keep-functions-concise": ["warn"]'})," (implies ",(0,s.jsx)(n.code,{children:"maxLines: 60"}),", ",(0,s.jsx)(n.code,{children:"skipBlankLines: false"}),", ",(0,s.jsx)(n.code,{children:"skipComments: false"}),")"]}),"\n",(0,s.jsx)(n.h4,{id:"-valid-should-not-produce-warnings-5",children:"\u2705 Valid (Should NOT produce warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Function within line limit\nfunction validateUserData(user) {\n  if (!user || !user.name) {\n    return false;\n  }\n\n  if (typeof user.name !== 'string') {\n    return false;\n  }\n\n  if (user.name.trim().length === 0) {\n    return false;\n  }\n\n  return true;\n}\n\n// Arrow function within limit\nconst transformUserData = user => {\n  return {\n    id: user.id,\n    name: user.name.toUpperCase(),\n    email: user.email?.toLowerCase(),\n    createdAt: new Date().toISOString(),\n  };\n};\n\n// Concise arrow function (single expression)\nconst getUserId = user => user?.id || null;\n\n// Function expression within limit\nconst processUser = function (user) {\n  const isValid = validateUserData(user);\n  if (!isValid) {\n    throw new Error('Invalid user data');\n  }\n\n  const transformed = transformUserData(user);\n  return saveUser(transformed);\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-invalid-should-produce-warnings-5",children:"\u274c Invalid (Should PRODUCE warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Function exceeding line limit (assumes > 60 lines)\nfunction processUserWithEverything(user) {\n  // Validation logic (15 lines)\n  if (!user) throw new Error('User is required');\n  if (!user.name) throw new Error('Name is required');\n  if (!user.email) throw new Error('Email is required');\n  if (typeof user.name !== 'string') throw new Error('Name must be string');\n  if (typeof user.email !== 'string') throw new Error('Email must be string');\n  if (user.name.trim().length === 0) throw new Error('Name cannot be empty');\n  if (!user.email.includes('@')) throw new Error('Invalid email format');\n\n  // Transformation logic (20 lines)\n  const normalizedName = user.name.trim().toLowerCase();\n  const normalizedEmail = user.email.trim().toLowerCase();\n  const slug = normalizedName.replace(/\\s+/g, '-');\n  const initials = normalizedName\n    .split(' ')\n    .map(n => n[0])\n    .join('')\n    .toUpperCase();\n\n  // Persistence logic (15 lines)\n  const existingUser = database.users.findByEmail(normalizedEmail);\n  if (existingUser) {\n    database.users.update(existingUser.id, {\n      name: normalizedName,\n      slug: slug,\n      initials: initials,\n      updatedAt: new Date(),\n    });\n  } else {\n    database.users.create({\n      name: normalizedName,\n      email: normalizedEmail,\n      slug: slug,\n      initials: initials,\n      createdAt: new Date(),\n    });\n  }\n\n  // Logging and cleanup (10+ more lines)...\n}\n// ESLint Warning: Function \"processUserWithEverything\" has 85 lines (max 60 allowed). (no lines skipped by options)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"scenario-2-skip-blank-lines",children:"Scenario 2: Skip Blank Lines"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"hub/keep-functions-concise": ["warn", { "skipBlankLines": true }]'})}),"\n",(0,s.jsx)(n.h4,{id:"-valid-should-not-produce-warnings-6",children:"\u2705 Valid (Should NOT produce warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Function with many blank lines for readability\nfunction calculateTotalPrice(items) {\n  let subtotal = 0;\n\n  for (const item of items) {\n    subtotal += item.price * item.quantity;\n  }\n\n  const taxRate = 0.08;\n  const tax = subtotal * taxRate;\n\n  const shippingCost = subtotal > 100 ? 0 : 10;\n\n  return {\n    subtotal,\n    tax,\n    shipping: shippingCost,\n    total: subtotal + tax + shippingCost,\n  };\n}\n// Blank lines are not counted, so this stays within limits\n"})}),"\n",(0,s.jsx)(n.h4,{id:"scenario-3-skip-comments",children:"Scenario 3: Skip Comments"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"hub/keep-functions-concise": ["warn", { "skipComments": true }]'})}),"\n",(0,s.jsx)(n.h4,{id:"-valid-should-not-produce-warnings-7",children:"\u2705 Valid (Should NOT produce warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Well-documented function with many comment lines\nfunction complexBusinessLogic(data) {\n  // Step 1: Validate input data\n  // This is critical for preventing downstream errors\n  if (!data || typeof data !== 'object') {\n    throw new Error('Invalid input data');\n  }\n\n  // Step 2: Initialize processing variables\n  // We need these for the calculation loop\n  let result = 0;\n  let processed = 0;\n\n  // Step 3: Process each item in the data\n  // The algorithm here implements the XYZ business rule\n  for (const item of data.items) {\n    // Skip invalid items to prevent corruption\n    if (!item.value || item.value < 0) {\n      continue;\n    }\n\n    // Apply the business transformation\n    // This formula was provided by the business team\n    result += item.value * 1.5;\n    processed++;\n  }\n\n  // Step 4: Apply final adjustments\n  // These adjustments are required by regulation ABC\n  if (processed > 10) {\n    result *= 0.95; // Volume discount\n  }\n\n  /* Final validation before return */\n  return Math.round(result * 100) / 100;\n}\n// Comment lines are not counted toward the limit\n"})}),"\n",(0,s.jsx)(n.h4,{id:"scenario-4-combined-options",children:"Scenario 4: Combined Options"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"hub/keep-functions-concise": ["warn", { "maxLines": 30, "skipBlankLines": true, "skipComments": true }]'})}),"\n",(0,s.jsx)(n.h4,{id:"-valid-should-not-produce-warnings-8",children:"\u2705 Valid (Should NOT produce warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Shorter limit but with generous skipping\nfunction moderateFunction(input) {\n  // This function has a lower line limit\n  // but comments and blank lines don't count\n\n  const step1 = processStep1(input);\n\n  // Intermediate processing\n  const step2 = processStep2(step1);\n\n  // Final transformation\n  return finalizeResult(step2);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"scenario-5-zero-line-limit-extreme",children:"Scenario 5: Zero Line Limit (Extreme)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"hub/keep-functions-concise": ["error", { "maxLines": 0 }]'})}),"\n",(0,s.jsx)(n.h4,{id:"-valid-should-not-produce-warnings-9",children:"\u2705 Valid (Should NOT produce warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Only concise arrow functions allowed\nconst add = (a, b) => a + b;\nconst getName = user => user?.name || 'Anonymous';\nconst isValid = data => data && data.length > 0;\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-invalid-should-produce-warnings-6",children:"\u274c Invalid (Should PRODUCE warnings):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Any function with a block body violates maxLines: 0\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n// ESLint Warning: Function "greet" has 1 lines (max 0 allowed). (no lines skipped by options)\n\nconst multiply = (a, b) => {\n  return a * b;\n};\n// ESLint Warning: Function "[anonymous_function]" has 1 lines (max 0 allowed). (no lines skipped by options)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"-recommended-patterns-1",children:"\u2705 Recommended Patterns:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Break down large functions into focused helpers\nfunction validateUser(user) {\n  if (!user) throw new Error('User is required');\n  if (!user.name) throw new Error('Name is required');\n  if (!user.email) throw new Error('Email is required');\n  return true;\n}\n\nfunction transformUser(user) {\n  return {\n    name: user.name.trim().toLowerCase(),\n    email: user.email.trim().toLowerCase(),\n    slug: user.name.replace(/\\s+/g, '-'),\n  };\n}\n\nfunction saveUser(userData) {\n  return database.users.create({\n    ...userData,\n    createdAt: new Date(),\n  });\n}\n\n// Main function orchestrates the helpers\nfunction processUser(user) {\n  validateUser(user);\n  const transformed = transformUser(user);\n  return saveUser(transformed);\n}\n\n// Use meaningful function names that describe purpose\nfunction calculateShippingCost(subtotal, location) {\n  if (subtotal > 100) return 0;\n  return location === 'domestic' ? 10 : 25;\n}\n\n// Extract complex conditions into named functions\nfunction isEligibleForDiscount(user, order) {\n  return user.isPremium && order.total > 200;\n}\n\nfunction processOrder(user, order) {\n  if (isEligibleForDiscount(user, order)) {\n    order.total *= 0.9;\n  }\n  return order;\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-patterns-to-avoid-1",children:"\u274c Patterns to Avoid:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Monolithic function doing everything\nfunction handleUserRegistration(userData) {\n  // 50+ lines of validation logic\n  // 30+ lines of data transformation\n  // 20+ lines of database operations\n  // 15+ lines of email sending\n  // 10+ lines of logging and cleanup\n  // This function is doing too many things!\n}\n\n// Overly long functions even with good structure\nfunction complexCalculation(input) {\n  // Even if well-organized, 100+ lines in one function\n  // is usually a sign that it should be broken down\n  // into smaller, testable pieces\n}\n\n// Functions with unclear responsibilities\nfunction doEverything(data) {\n  // When the function name doesn't clearly indicate\n  // what it does, it's often too complex\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"benefits-1",children:"Benefits"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Improved Readability"}),": Shorter functions are easier to understand at a glance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better Testability"}),": Small functions with single responsibilities are easier to unit test"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reduced Bugs"}),": Less code per function means fewer places for bugs to hide"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enhanced Maintainability"}),": Changes to small functions have limited blast radius"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code Reusability"}),": Well-factored helper functions can often be reused elsewhere"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Easier Code Reviews"}),": Reviewers can more easily understand and verify small functions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better Separation of Concerns"}),": Forces developers to think about function responsibilities"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"8-use-runtime-assertions",children:"8. use-runtime-assertions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": Enforces the presence of a minimum number of runtime assertions in functions to validate inputs and critical intermediate values. This rule helps prevent bugs by encouraging defensive programming practices and proper input validation."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rationale"}),": Functions without proper input validation are a common source of runtime errors and security vulnerabilities. Unvalidated inputs can lead to unexpected behavior, crashes, or even security exploits. Runtime assertions serve as guardrails that catch invalid data early, making code more robust and easier to debug. They also serve as executable documentation that clarifies the expected behavior and constraints of functions."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"This rule enforces:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Minimum number of runtime assertions per function"}),"\n",(0,s.jsx)(n.li,{children:"Support for various assertion patterns (if-throw, console.assert, custom utilities)"}),"\n",(0,s.jsx)(n.li,{children:"Configurable assertion requirements based on function complexity"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-configuration-2",children:"Example Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/use-runtime-assertions": ["warn", {\n      "minAssertions": 2,\n      "assertionUtilityNames": ["assert", "invariant", "check"],\n      "ignoreEmptyFunctions": true\n    }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"recognized-assertion-patterns",children:"Recognized Assertion Patterns"}),"\n",(0,s.jsx)(n.p,{children:"The rule recognizes these patterns as runtime assertions:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"If-throw statements"}),": ",(0,s.jsx)(n.code,{children:"if (condition) throw new Error(...)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Direct throw statements"}),": ",(0,s.jsx)(n.code,{children:"throw new Error(...)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Console assertions"}),": ",(0,s.jsx)(n.code,{children:"console.assert(condition, message)"})," (when 'assert' is in ",(0,s.jsx)(n.code,{children:"assertionUtilityNames"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom assertion utilities"}),": Any function call matching names in ",(0,s.jsx)(n.code,{children:"assertionUtilityNames"})]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"examples-3",children:"Examples"}),"\n",(0,s.jsx)(n.h5,{id:"-valid-code-should-not-produce-warnings-1",children:"\u2705 Valid Code (Should NOT produce warnings)"}),"\n",(0,s.jsx)(n.h4,{id:"default-configuration-minassertions-2",children:"Default Configuration (minAssertions: 2)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Function with proper input validation\nfunction calculate(price, rate) {\n  if (typeof price !== 'number') throw new Error('Invalid price');\n  if (typeof rate !== 'number') throw new Error('Invalid rate');\n  return price * rate;\n}\n\n// Mixed assertion types\nfunction processData(data) {\n  console.assert(data !== null, 'Data cannot be null');\n  if (!data.id) {\n    throw new Error('Data must have an ID');\n  }\n  return data.processed;\n}\n\n// Nested if-throw patterns\nfunction checkUser(user) {\n  if (!user) throw new Error('User undefined');\n  console.assert(user.active, 'User must be active');\n}\n\n// Arrow function with assertions\nconst arrowAssert = val => {\n  if (!val) throw new Error('No val');\n  console.assert(val > 0, 'Val not positive');\n  return val * 2;\n};\n\n// Function expression with assertions\nconst exprAssert = function (val) {\n  if (!val) throw new Error('No val');\n  console.assert(val > 0, 'Val not positive');\n  return val;\n};\n\n// Empty function (ignored by default)\nfunction noBody() {}\n\n// Arrow function with implicit return\nconst implicit = a => a + 1;\n"})}),"\n",(0,s.jsx)(n.h4,{id:"custom-minassertions-1",children:"Custom minAssertions: 1"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Single assertion is sufficient\nfunction simpleCheck(value) {\n  if (value < 0) throw new Error('Value must be non-negative');\n  return Math.sqrt(value);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"custom-assertion-utilities",children:"Custom Assertion Utilities"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Using custom assertion utility\nfunction customAssertTest(a, b) {\n  myCustomAssert(typeof a === 'string', 'A must be a string');\n  if (b < 0) {\n    throw new Error('B must be positive');\n  }\n  return a.repeat(b);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"complex-nested-assertions",children:"Complex Nested Assertions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Nested if-throw counts as assertion\nfunction nestedIfThrow(value) {\n  if (value === null) {\n    if (true) {\n      // nested condition\n      throw new Error('Value is critically null');\n    }\n  }\n  if (value < 0) {\n    throw new Error('Value is negative');\n  }\n  return value;\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-invalid-code-should-produce-warnings-1",children:"\u274c Invalid Code (Should PRODUCE warnings)"}),"\n",(0,s.jsx)(n.h4,{id:"default-configuration-minassertions-2-1",children:"Default Configuration (minAssertions: 2)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// ESLint Error: Function "calculate" should have at least 2 runtime assertions, but found 1.\nfunction calculate(price, rate) {\n  if (typeof price !== \'number\') throw new Error(\'Invalid price\');\n  // Only one assertion - needs another\n  return price * rate;\n}\n\n// ESLint Error: Function "noAsserts" should have at least 2 runtime assertions, but found 0.\nfunction noAsserts(value) {\n  return value * 2;\n}\n\n// ESLint Error: Function "calculateDiscount" should have at least 2 runtime assertions, but found 0.\nfunction calculateDiscount(price, discountRate) {\n  // No input or output validation\n  return price - price * discountRate;\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"custom-minassertions-3",children:"Custom minAssertions: 3"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// ESLint Error: Function \"needsThree\" should have at least 3 runtime assertions, but found 2.\nfunction needsThree(a, b, c) {\n  if (!a) throw new Error('a is required');\n  console.assert(b, 'b is required');\n  // Only two assertions, but needs three\n  return a + b + c;\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"custom-assertion-utilities-not-recognized",children:"Custom Assertion Utilities Not Recognized"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// When assertionUtilityNames: ['myOrgChecker'] (doesn't include 'assert')\n// ESLint Error: Function \"usesWrongAssert\" should have at least 2 runtime assertions, but found 1.\nfunction usesWrongAssert(value) {\n  // console.assert not counted because 'assert' not in assertionUtilityNames\n  console.assert(value, 'Value is present');\n  if (value < 0) throw new Error('Negative'); // Only this counts\n  return value;\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"arrow-functions",children:"Arrow Functions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// ESLint Error: Function "arrowNoAssert" should have at least 2 runtime assertions, but found 0.\nconst arrowNoAssert = val => {\n  return val;\n};\n'})}),"\n",(0,s.jsx)(n.h4,{id:"empty-functions-when-ignoreemptyfunctions-false",children:"Empty Functions (when ignoreEmptyFunctions: false)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// ESLint Error: Function "empty" should have at least 2 runtime assertions, but found 0.\nfunction empty() {}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"configuration-examples",children:"Configuration Examples"}),"\n",(0,s.jsx)(n.h4,{id:"strict-validation-3-assertions",children:"Strict Validation (3+ assertions)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/use-runtime-assertions": ["error", {\n      "minAssertions": 3,\n      "assertionUtilityNames": ["assert", "invariant", "check"],\n      "ignoreEmptyFunctions": true\n    }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"minimal-validation-1-assertion",children:"Minimal Validation (1 assertion)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/use-runtime-assertions": ["warn", {\n      "minAssertions": 1,\n      "assertionUtilityNames": ["assert"],\n      "ignoreEmptyFunctions": true\n    }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"custom-assertion-libraries",children:"Custom Assertion Libraries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/use-runtime-assertions": ["warn", {\n      "minAssertions": 2,\n      "assertionUtilityNames": ["invariant", "check", "validate", "ensure"],\n      "ignoreEmptyFunctions": true\n    }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"no-empty-function-exceptions",children:"No Empty Function Exceptions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/use-runtime-assertions": ["warn", {\n      "minAssertions": 2,\n      "assertionUtilityNames": ["assert"],\n      "ignoreEmptyFunctions": false\n    }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"recommended-patterns-1",children:"Recommended Patterns"}),"\n",(0,s.jsx)(n.h4,{id:"-input-validation",children:"\u2705 Input Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function processUser(user, options) {\n  // Validate required parameters\n  if (!user) throw new Error('User is required');\n  if (typeof user.id !== 'string') throw new Error('User ID must be string');\n\n  // Validate optional parameters\n  if (options && typeof options !== 'object') {\n    throw new Error('Options must be object');\n  }\n\n  return {\n    id: user.id,\n    name: user.name,\n    settings: options || {},\n  };\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-boundary-checking",children:"\u2705 Boundary Checking"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function calculatePercentage(value, total) {\n  if (typeof value !== 'number' || typeof total !== 'number') {\n    throw new Error('Both value and total must be numbers');\n  }\n  if (total === 0) throw new Error('Total cannot be zero');\n  if (value < 0 || total < 0) throw new Error('Values must be non-negative');\n\n  return (value / total) * 100;\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-state-validation",children:"\u2705 State Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function withdrawFunds(account, amount) {\n  if (!account) throw new Error('Account is required');\n  if (typeof amount !== 'number' || amount <= 0) {\n    throw new Error('Amount must be positive number');\n  }\n  if (account.balance < amount) {\n    throw new Error('Insufficient funds');\n  }\n\n  account.balance -= amount;\n  return account.balance;\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-using-custom-assertion-utilities",children:"\u2705 Using Custom Assertion Utilities"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// With custom assertion utility\nfunction complexCalculation(data) {\n  invariant(data && typeof data === 'object', 'Data must be object');\n  invariant(Array.isArray(data.items), 'Data.items must be array');\n  check(data.items.length > 0, 'Items array cannot be empty');\n\n  return data.items.reduce((sum, item) => sum + item.value, 0);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"when-to-disable-1",children:"When to Disable"}),"\n",(0,s.jsx)(n.p,{children:"Consider disabling this rule for:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"/* eslint-disable hub/use-runtime-assertions */\n// Simple utility functions with obvious behavior\nfunction add(a, b) {\n  return a + b;\n}\n\n// Functions that are already validated by TypeScript\nfunction typedFunction(value: NonNullable<string>): string {\n  return value.toUpperCase();\n}\n\n// Test helper functions\nfunction createMockUser() {\n  return { id: '123', name: 'Test User' };\n}\n/* eslint-enable hub/use-runtime-assertions */\n"})}),"\n",(0,s.jsx)(n.h4,{id:"alternative-approaches",children:"Alternative Approaches"}),"\n",(0,s.jsx)(n.p,{children:"Instead of disabling the rule, consider:"}),"\n",(0,s.jsx)(n.h4,{id:"lower-minassertions-for-simple-functions",children:"Lower minAssertions for Simple Functions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/use-runtime-assertions": ["warn", { "minAssertions": 1 }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"use-type-checking--runtime-validation",children:"Use Type Checking + Runtime Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function processData(data: unknown) {\n  // Runtime validation for dynamic data\n  if (!data || typeof data !== 'object') {\n    throw new Error('Invalid data format');\n  }\n\n  if (!('id' in data) || typeof data.id !== 'string') {\n    throw new Error('Missing or invalid ID');\n  }\n\n  return data as { id: string };\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"benefits-2",children:"Benefits"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Early Error Detection"}),": Catches invalid inputs before they cause problems"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better Debugging"}),": Clear error messages help identify issues quickly"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Executable Documentation"}),": Assertions serve as live documentation of function requirements"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Defensive Programming"}),": Encourages thinking about edge cases and error conditions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Runtime Safety"}),": Provides guardrails that TypeScript can't offer for dynamic data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Improved Reliability"}),": Reduces likelihood of silent failures and unexpected behavior"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better Testing"}),": Assertions help identify test cases and boundary conditions"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"9-minimize-deep-asynchronous-chains",children:"9. minimize-deep-asynchronous-chains"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": Limits the depth of Promise chains and the number of await expressions in async functions to prevent overly complex asynchronous code that is difficult to read, debug, and maintain."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rationale"}),": Deep Promise chains and functions with excessive await expressions create several problems: they are harder to understand and debug, make error handling more complex, can lead to callback hell-like patterns even with modern async/await syntax, and often indicate that code should be refactored into smaller, more focused functions. By limiting chain depth and await count, this rule encourages better code organization and maintainability."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"This rule enforces:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Maximum number of chained Promise methods (.then, .catch, .finally)"}),"\n",(0,s.jsx)(n.li,{children:"Maximum number of await expressions per async function"}),"\n",(0,s.jsx)(n.li,{children:"Configurable limits for both Promise chains and await expressions"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"default-configuration",children:"Default Configuration"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"maxPromiseChainLength"}),": 3 (maximum chained .then/.catch/.finally calls)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"maxAwaitExpressions"}),": 3 (maximum await expressions per async function)"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"examples-4",children:"Examples"}),"\n",(0,s.jsx)(n.h5,{id:"-valid-code-should-not-produce-warnings-2",children:"\u2705 Valid Code (Should NOT produce warnings)"}),"\n",(0,s.jsx)(n.h4,{id:"default-configuration-maxpromisechainlength-3-maxawaitexpressions-3",children:"Default Configuration (maxPromiseChainLength: 3, maxAwaitExpressions: 3)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Single .then() call\nfetch().then(res => res.json());\n\n// Two chained .then() calls\nfetch()\n  .then(res => res.json())\n  .then(data => console.log(data));\n\n// Mixed .then(), .catch(), .finally() - exactly at limit\nfetch().then().catch().finally();\n\n// Promise with .then() and .catch()\npromise.then(a => a).catch(err => console.error(err));\n\n// new Promise with chain\nnew Promise(resolve => resolve()).then(x => x).finally(() => {});\n\n// Nested promise chains within limits\nfunctionA()\n  .then(() => {\n    return functionB().then(res => res); // Inner chain length 1\n  })\n  .then(final => console.log(final)); // Outer chain length 2\n\n// Single await\nasync function foo() {\n  await p1;\n}\n\n// Two awaits\nasync function foo() {\n  await p1;\n  await p2;\n}\n\n// Three awaits - at limit\nasync function foo() {\n  await p1;\n  await p2;\n  await p3;\n}\n\n// Conditional await within limits\nasync function bar() {\n  await step1();\n  if (condition) {\n    await step2(); // Still in same function scope\n  }\n  await step3();\n}\n\n// Nested async functions - each within limits\nasync function outer() {\n  await p1(); // 1 for outer\n\n  async function inner() {\n    await p2(); // 1 for inner (separate function)\n    await p3(); // 2 for inner\n    await p4(); // 3 for inner\n  }\n\n  await inner(); // 2 for outer\n  await something(); // 3 for outer\n}\n\n// Async arrow function with 3 awaits\nconst asyncArrow = async () => {\n  const a = await op1();\n  const b = await op2(a);\n  return await op3(b);\n};\n\n// Awaits with intermediate variables\nasync function test() {\n  const promise = createPromise();\n  // await in different statements\n  const a = await promise;\n  const b = await processA(a);\n  const c = await processB(b);\n}\n\n// Non-promise method chaining should be ignored\nfunc1().func2().func3().func4();\n"})}),"\n",(0,s.jsx)(n.h4,{id:"custom-configuration-examples",children:"Custom Configuration Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Chain of 4 allowed with custom config\n// maxPromiseChainLength: 4\nfetch().then().then().then().then();\n\n// 4 awaits allowed with custom config\n// maxAwaitExpressions: 4\nasync function foo() {\n  await p1;\n  await p2;\n  await p3;\n  await p4;\n}\n\n// Different limits for promises vs awaits\n// maxPromiseChainLength: 5, maxAwaitExpressions: 1\nfetch().then().then();\n"})}),"\n",(0,s.jsx)(n.h5,{id:"-invalid-code-should-produce-warnings-2",children:"\u274c Invalid Code (Should PRODUCE warnings)"}),"\n",(0,s.jsx)(n.h4,{id:"default-configuration-maxpromisechainlength-3-maxawaitexpressions-3-1",children:"Default Configuration (maxPromiseChainLength: 3, maxAwaitExpressions: 3)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// ESLint Error: Promise chain starting at fetch() has 4 .then/.catch/.finally calls, exceeding the maximum of 3.\nfetch().then().then().then().then();\n\n// ESLint Error: Promise chain starting at myPromise has 4 .then/.catch/.finally calls, exceeding the maximum of 3.\nmyPromise.then(a).catch(b).then(c).finally(d);\n\n// ESLint Error: Promise chain starting at getData() has 4 .then/.catch/.finally calls, exceeding the maximum of 3.\napi.getData().then().then().then().catch();\n\n// ESLint Error: Promise chain starting at new Promise() has 4 .then/.catch/.finally calls, exceeding the maximum of 3.\nnew Promise(resolve => resolve(1)).then().then().then().finally();\n\n// ESLint Error: Async function "foo" has 4 await expressions, exceeding the maximum of 3.\nasync function foo() {\n  await p1;\n  await p2;\n  await p3;\n  await p4;\n}\n\n// ESLint Error: Async function "bar" has 5 await expressions, exceeding the maximum of 3.\nconst bar = async () => {\n  await s1;\n  let x = await s2;\n  if (x) {\n    await s3;\n  }\n  await s4;\n  try {\n    await s5;\n  } catch (e) {}\n};\n\n// ESLint Error: Async function "processData" has 5 await expressions, exceeding the maximum of 3.\nasync function processData(data) {\n  const validated = await validateData(data);\n  const transformed = await transformData(validated);\n  const enriched = await enrichData(transformed);\n  const saved = await saveData(enriched);\n  const notification = await sendNotification(saved);\n  return notification;\n}\n\n// ESLint Error: Async function "originalProblem" has 5 await expressions, exceeding the maximum of 3.\nasync function originalProblem(id) {\n  const r1 = await op1(id);\n  const r2 = await op2(r1);\n  const r3 = await op3(r2);\n  const r4 = await op4(r3);\n  const r5 = await op5(r4);\n  return r5;\n}\n\n// ESLint Error: Promise chain starting at fetch() has 4 .then/.catch/.finally calls, exceeding the maximum of 3.\nfetch(\'/api/complex-data\')\n  .then(response => response.json())\n  .then(data => firstProcessing(data))\n  .then(intermediate => secondProcessing(intermediate))\n  .then(finalData => displayResult(finalData));\n'})}),"\n",(0,s.jsx)(n.h4,{id:"custom-configuration-violations",children:"Custom Configuration Violations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// maxPromiseChainLength: 2\n// ESLint Error: Promise chain starting at fetch() has 3 .then/.catch/.finally calls, exceeding the maximum of 2.\nfetch().then().then().then();\n\n// maxAwaitExpressions: 2\n// ESLint Error: Async function "foo" has 3 await expressions, exceeding the maximum of 2.\nasync function foo() {\n  await p1;\n  await p2;\n  await p3;\n}\n\n// maxPromiseChainLength: 10, maxAwaitExpressions: 3\n// ESLint Error: Async function "complexFlow" has 4 await expressions, exceeding the maximum of 3.\nasync function complexFlow() {\n  await step1();\n  await step2();\n  await step3();\n  await step4();\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"mixed-violations-both-types-in-same-function",children:"Mixed Violations (Both Types in Same Function)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// ESLint Error: Async function \"mixedViolations\" has 4 await expressions, exceeding the maximum of 3.\n// ESLint Error: Promise chain starting at fetch() has 4 .then/.catch/.finally calls, exceeding the maximum of 3.\nasync function mixedViolations() {\n  // This function has too many awaits\n  await step1();\n  await step2();\n  await step3();\n  await step4();\n\n  // And also creates a long promise chain\n  return fetch('/data')\n    .then(res => res.json())\n    .then(data => process1(data))\n    .then(result => process2(result))\n    .then(final => final);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"configuration-examples-1",children:"Configuration Examples"}),"\n",(0,s.jsx)(n.h4,{id:"strict-limits-2-max-for-both",children:"Strict Limits (2 max for both)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/minimize-deep-asynchronous-chains": ["error", {\n      "maxPromiseChainLength": 2,\n      "maxAwaitExpressions": 2\n    }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"relaxed-limits-5-max-for-both",children:"Relaxed Limits (5 max for both)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/minimize-deep-asynchronous-chains": ["warn", {\n      "maxPromiseChainLength": 5,\n      "maxAwaitExpressions": 5\n    }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"mixed-limits-different-for-promises-vs-awaits",children:"Mixed Limits (Different for promises vs awaits)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/minimize-deep-asynchronous-chains": ["warn", {\n      "maxPromiseChainLength": 4,\n      "maxAwaitExpressions": 2\n    }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"only-check-promise-chains",children:"Only Check Promise Chains"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/minimize-deep-asynchronous-chains": ["warn", {\n      "maxPromiseChainLength": 3,\n      "maxAwaitExpressions": 999\n    }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"recommended-patterns-2",children:"Recommended Patterns"}),"\n",(0,s.jsx)(n.h4,{id:"-refactor-long-promise-chains",children:"\u2705 Refactor Long Promise Chains"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Instead of this (violates rule):\nfetch('/api/data')\n  .then(response => response.json())\n  .then(data => validateData(data))\n  .then(validData => processData(validData))\n  .then(processedData => saveData(processedData));\n\n// Do this:\nasync function handleDataFlow() {\n  const response = await fetch('/api/data');\n  const data = await response.json();\n  const validData = await validateData(data);\n  const processedData = await processData(validData);\n  return await saveData(processedData);\n}\n\n// Or extract helper functions:\nasync function fetchAndParseData() {\n  const response = await fetch('/api/data');\n  return await response.json();\n}\n\nasync function processAndSaveData(data) {\n  const validData = await validateData(data);\n  const processedData = await processData(validData);\n  return await saveData(processedData);\n}\n\nasync function handleDataFlow() {\n  const data = await fetchAndParseData();\n  return await processAndSaveData(data);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-break-down-complex-async-functions",children:"\u2705 Break Down Complex Async Functions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Instead of this (violates rule):\nasync function complexOperation(id) {\n  const user = await fetchUser(id);\n  const profile = await fetchProfile(user.profileId);\n  const settings = await fetchSettings(user.settingsId);\n  const permissions = await fetchPermissions(user.roleId);\n  const activities = await fetchActivities(user.id);\n  return { user, profile, settings, permissions, activities };\n}\n\n// Do this:\nasync function fetchUserData(id) {\n  const user = await fetchUser(id);\n  const profile = await fetchProfile(user.profileId);\n  const settings = await fetchSettings(user.settingsId);\n  return { user, profile, settings };\n}\n\nasync function fetchUserMetadata(user) {\n  const permissions = await fetchPermissions(user.roleId);\n  const activities = await fetchActivities(user.id);\n  return { permissions, activities };\n}\n\nasync function complexOperation(id) {\n  const userData = await fetchUserData(id);\n  const metadata = await fetchUserMetadata(userData.user);\n  return { ...userData, ...metadata };\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-use-promiseall-for-parallel-operations",children:"\u2705 Use Promise.all for Parallel Operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Instead of sequential awaits:\nasync function fetchAllData(ids) {\n  const results = [];\n  for (const id of ids) {\n    const result = await fetchData(id);\n    results.push(result);\n  }\n  return results;\n}\n\n// Use parallel execution:\nasync function fetchAllData(ids) {\n  const promises = ids.map(id => fetchData(id));\n  return await Promise.all(promises);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"when-to-disable-2",children:"When to Disable"}),"\n",(0,s.jsx)(n.p,{children:"Consider disabling this rule for:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"/* eslint-disable hub/minimize-deep-asynchronous-chains */\n// Complex orchestration functions that legitimately need many async operations\nasync function orchestrateComplexWorkflow(data) {\n  // This function coordinates a complex multi-step process\n  const validated = await validateInput(data);\n  const prepared = await prepareData(validated);\n  const processed = await processStep1(prepared);\n  const enhanced = await processStep2(processed);\n  const finalized = await processStep3(enhanced);\n  const result = await finalizeResult(finalized);\n  return result;\n}\n\n// Legacy code migration where immediate refactoring isn't feasible\nfetch('/legacy-api')\n  .then(response => response.json())\n  .then(data => legacyTransform1(data))\n  .then(data => legacyTransform2(data))\n  .then(data => legacyTransform3(data))\n  .then(data => legacyOutput(data));\n/* eslint-enable hub/minimize-deep-asynchronous-chains */\n"})}),"\n",(0,s.jsx)(n.h4,{id:"alternative-approaches-1",children:"Alternative Approaches"}),"\n",(0,s.jsx)(n.p,{children:"Instead of disabling the rule, consider:"}),"\n",(0,s.jsx)(n.h4,{id:"higher-limits-for-specific-cases",children:"Higher Limits for Specific Cases"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/minimize-deep-asynchronous-chains": ["warn", {\n      "maxPromiseChainLength": 5,\n      "maxAwaitExpressions": 6\n    }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"functional-composition",children:"Functional Composition"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Use functional composition for complex transformations\nconst pipe =\n  (...fns) =>\n  value =>\n    fns.reduce((acc, fn) => fn(acc), value);\n\nconst processData = pipe(validateData, transformData, enrichData);\n\nasync function handleData(rawData) {\n  const processed = await processData(rawData);\n  return await saveData(processed);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"benefits-3",children:"Benefits"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Improved Readability"}),": Shorter chains and functions are easier to understand"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better Error Handling"}),": Fewer nested operations make error handling clearer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enhanced Debugging"}),": Smaller async operations are easier to debug and test"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Encourages Composition"}),": Promotes breaking down complex operations into smaller, reusable functions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Prevents Callback Hell"}),": Even with modern async/await, excessive nesting creates similar problems"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better Maintainability"}),": Smaller, focused async functions are easier to modify and extend"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance Awareness"}),": Encourages thinking about whether operations can be parallelized"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code Organization"}),": Forces developers to think about proper function boundaries and responsibilities"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"10-check-return-values",children:"10. check-return-values"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": Enforces handling of return values from non-void functions. If a function's return value is intentionally not used, it should be explicitly ignored via void operator, assignment to an underscore (_), or a specific comment. This rule helps prevent bugs caused by unintentionally overlooking important results from function calls, such as error flags, success statuses, or computed data. It exempts standard console.* method calls."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rationale"}),": Neglecting to check or use the return value of a function can lead to silent failures or missed opportunities to act on critical information. For instance, a function that updates a database might return a success/failure status; ignoring this status means the application might proceed unaware of an error. This rule encourages developers to be deliberate about function outcomes, improving code robustness and reliability."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Options"}),": The rule accepts a single object with the following property:"]}),"\n",(0,s.jsx)(n.h4,{id:"requireexplicitignore",children:(0,s.jsx)(n.code,{children:"requireExplicitIgnore"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": If true (default), any function call whose return value is not used must be explicitly marked as ignored (e.g., void func();, _ = func();, or via a comment // return value intentionally ignored). If false, function calls whose return values are not used will not be flagged, effectively disabling the core check of this rule for explicit ignores."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "rules": {\n    "hub/check-return-values": ["warn", { "requireExplicitIgnore": false }]\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example of Full Configuration in eslint.config.js"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// eslint.config.js\nimport hub from '@mindfiredigital/eslint-plugin-hub';\n\nexport default [\n  {\n    plugins: { hub: hub },\n    rules: {\n      'hub/check-return-values': [\n        'error',\n        {\n          // Using \"error\" severity\n          requireExplicitIgnore: true,\n        },\n      ],\n      // ... other rules\n    },\n  },\n];\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Examples"}),":"]}),"\n",(0,s.jsx)(n.h4,{id:"scenario-1-default-configuration-requireexplicitignore-true",children:"Scenario 1: Default Configuration (requireExplicitIgnore: true)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"hub/check-return-values": ["warn"]'})}),"\n",(0,s.jsx)(n.h4,{id:"-valid",children:"\u2705 Valid:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function doSomething() {\n  return 42;\n}\nconst result = doSomething(); // Value used\n\nlet success;\nsuccess = doSomething(); // Value used\n\nif (doSomething()) {\n  /* Value used */\n}\n\nfunction another() {\n  return doSomething();\n} // Value used\n\nvoid doSomething(); // Explicitly ignored\n\n_ = doSomething(); // Explicitly ignored\n\n// return value intentionally ignored\ndoSomething();\n\ndoSomething(); // return value intentionally ignored\n\n/* return value intentionally ignored */\ndoSomething();\n\nconsole.log('Hello'); // Console calls are exempt\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-invalid",children:"\u274c Invalid:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function doSomething() {\n  return true;\n}\n\ndoSomething(); // Value not used\n"})}),"\n",(0,s.jsx)(n.h4,{id:"scenario-2-requireexplicitignore-false",children:"Scenario 2: requireExplicitIgnore: false"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'"hub/check-return-values": ["warn", { "requireExplicitIgnore": false }]'})}),"\n",(0,s.jsx)(n.h4,{id:"-valid-1",children:"\u2705 Valid:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function doSomething() {\n  return true;\n}\ndoSomething(); // OK, explicit ignore not required\n\nconst result = doSomething(); // Still OK (value used)\n\nconsole.warn('Warning message'); // Still OK, console calls are exempt\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": When requireExplicitIgnore is false, the rule becomes much less strict. Its primary utility is when requireExplicitIgnore is true, encouraging deliberate handling or acknowledgment of all function return values."]}),"\n",(0,s.jsx)(n.h3,{id:"11-no-build-env-in-source",children:"11. no-build-env-in-source"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": Discourages direct conditional branching (i.e., if statements) on process.env variables that are typically set or controlled by the build process or deployment environment (e.g., NODE_ENV, DEBUG). This rule promotes centralizing environment-specific logic into dedicated configuration modules or using runtime flags, leading to cleaner, more testable, and maintainable code."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rationale"}),": Scattering if (process.env.SOME_FLAG === 'value') checks throughout an application makes it difficult to manage environment-specific behavior and can lead to inconsistencies. It also makes the core application logic harder to test without extensive mocking of process.env. By encouraging the use of a configuration layer, this rule helps separate concerns and makes the application's behavior more predictable across different environments."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Options"}),": The rule accepts a single object with the following properties:"]}),"\n",(0,s.jsx)(n.h4,{id:"disallowedenvvariables",children:(0,s.jsx)(n.code,{children:"disallowedEnvVariables"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"array of string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": A list of process.env variable names (e.g., 'NODE_ENV', 'DEBUG') whose direct use in if statement conditions is discouraged."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"['NODE_ENV', 'DEBUG']"})]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Example Usage:"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// In your ESLint config rules section:\n{\n  rules: { "hub/no-build-env-in-source": ["warn", { "disallowedEnvVariables": ["API_STAGE", "MOCK_MODE"] }] }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"allowedcomparisons",children:(0,s.jsx)(n.code,{children:"allowedComparisons"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"object"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": An object where keys are environment variable names (from disallowedEnvVariables) and values are arrays of strings representing allowed comparison values. For example, ","NODE_ENV"-["production"]," would allow if (process.env.NODE_ENV === 'production') but flag other comparisons involving NODE_ENV. Direct boolean usage (e.g., if (process.env.NODE_ENV)) is generally disallowed if the variable is in disallowedEnvVariables, regardless of this option, unless the intent is to allow its truthiness/falsiness as a general condition (which this rule discourages for \"build flags\")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"{}"})]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Example Usage:"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// In your ESLint config rules section:\n{\n  rules: {\n    "hub/no-build-env-in-source": ["warn", {\n      "disallowedEnvVariables": ["NODE_ENV"],\n      "allowedComparisons": { "NODE_ENV": ["production", "test"] }\n    }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"suggestalternative",children:(0,s.jsx)(n.code,{children:"suggestAlternative"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": A custom message string to be included in the ESLint warning, suggesting an alternative approach."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),': "Consider using a dedicated configuration module or runtime flags instead of branching directly on this build/environment variable."']}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Example Usage:"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// In your ESLint config rules section:\n{\n  rules: {\n    "hub/no-build-env-in-source": ["warn", {\n      "suggestAlternative": "Please use the global AppConfig object for environment checks."\n    }]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Example of Full Configuration in eslint.config.js:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// eslint.config.js\nimport hub from '@mindfiredigital/eslint-plugin-hub';\n\nexport default [\n  {\n    plugins: { hub: hub },\n    rules: {\n      'hub/no-build-env-in-source': [\n        'warn',\n        {\n          disallowedEnvVariables: ['NODE_ENV', 'FEATURE_FLAG_XYZ'],\n          allowedComparisons: { NODE_ENV: ['production'] },\n          suggestAlternative:\n            'Use `config.isProduction` or `config.featureFlags.XYZ` instead.',\n        },\n      ],\n      // ... other rules\n    },\n  },\n];\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples-5",children:"Examples:"}),"\n",(0,s.jsx)(n.p,{children:"(Using the full example configuration above for these scenarios)"}),"\n",(0,s.jsx)(n.h4,{id:"-valid-2",children:"\u2705 Valid:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Checking an allowed comparison for a disallowed variable\nif (process.env.NODE_ENV === 'production') {\n  enableProdOptimizations();\n}\n\n// Using a process.env variable not in the 'disallowedEnvVariables' list\nconst port = process.env.PORT || 3000;\nif (process.env.LOG_LEVEL === 'verbose') {\n  /* Assuming LOG_LEVEL is not disallowed */\n  setupVerboseLogging();\n}\n\n// Accessing process.env outside of an 'if' condition's test\nconst currentEnv = process.env.NODE_ENV;\nfunction getDbConfig(envName = process.env.NODE_ENV) {\n  /* ... */\n}\n\n// Using a configuration module (recommended pattern)\n// Assume config.js: export default { isProduction: process.env.NODE_ENV === 'production', ... }\nimport config from './config';\nif (config.isProduction) {\n  // This is fine as the direct process.env check is encapsulated\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-invalid-1",children:"\u274c Invalid:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Checking NODE_ENV for a non-allowed value ('development')\nif (process.env.NODE_ENV === 'development') {\n  // Flagged by default and with example config\n  setupDevEnvironment();\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ESLint Warning:"})," Use config.isProduction or config.featureFlags.XYZ instead. (found: process.env.NODE_ENV === (or !==) 'development')."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Direct usage of a disallowed variable (DEBUG is disallowed by default)\nif (process.env.DEBUG) {\n  enableVerboseLogging();\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices-for-nodejs-project-reliability",children:"Best Practices for Node.js Project Reliability"}),"\n",(0,s.jsx)(n.p,{children:"By following these rules, you can ensure a more robust and reliable Node.js codebase. Node.js projects benefit from proactive error prevention, particularly when adhering to these development practices:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Prevent infinite loops with clear termination conditions"}),": This avoids application hangs and resource exhaustion that can crash your Node.js server."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Address linter warnings immediately"}),": This prevents technical debt accumulation and catches potential bugs before they reach production."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Maintain proper data scoping"}),": This reduces global pollution and naming conflicts that are especially problematic in Node.js's module system."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"additional-notes",children:"Additional Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Customization"}),": If necessary, you can override these rules to fit the specific needs of your Node.js project. However, adhering to these practices is highly recommended for production stability and maintainability."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance Impact"}),": These rules help prevent common Node.js performance pitfalls like infinite loops and memory leaks from improper scoping."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Production Readiness"}),": Following these guidelines ensures your Node.js applications are more suitable for production environments where reliability is critical."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>t});var s=i(6540);const r={},a=s.createContext(r);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);