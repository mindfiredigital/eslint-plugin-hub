"use strict";(self.webpackChunkeslint_plugin_hub=self.webpackChunkeslint_plugin_hub||[]).push([[387],{9175:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>t,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var r=i(4848),l=i(8453);const s={},a="Angular",o={id:"angular",title:"Angular",description:"Angular Plugin Configuration",source:"@site/docs/angular.md",sourceDirName:".",slug:"/angular",permalink:"/eslint-plugin-hub/docs/angular",draft:!1,unlisted:!1,editUrl:"https://github.com/mindfiredigital/eslint-plugin-hub/edit/main/docs/angular.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"React",permalink:"/eslint-plugin-hub/docs/react"},next:{title:"Node",permalink:"/eslint-plugin-hub/docs/node"}},t={},d=[{value:"Angular Plugin Configuration",id:"angular-plugin-configuration",level:2},{value:"Angular Rules",id:"angular-rules",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Import Angular Rules",id:"import-angular-rules",level:3},{value:"Angular Rule Details",id:"angular-rule-details",level:3},{value:"<code>angular-no-forbidden-services</code>",id:"angular-no-forbidden-services",level:4},{value:"<code>angular-no-unused-inputs</code>",id:"angular-no-unused-inputs",level:4},{value:"<code>angular-no-direct-dom-manipulation</code>",id:"angular-no-direct-dom-manipulation",level:4},{value:"<code>angular-limit-input</code>",id:"angular-limit-input",level:4},{value:"<code>angular-filenaming</code>",id:"angular-filenaming",level:4},{value:"Conclusion",id:"conclusion",level:3}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"angular",children:"Angular"})}),"\n",(0,r.jsx)(e.h2,{id:"angular-plugin-configuration",children:"Angular Plugin Configuration"}),"\n",(0,r.jsx)(e.p,{children:"To ensure consistent coding standards and best practices in Angular projects, the ESLint Plugin Hub provides several Angular-specific rules. These rules enforce best practices for naming conventions, component structure, and the usage of services, inputs, and DOM manipulation within Angular projects."}),"\n",(0,r.jsx)(e.h3,{id:"angular-rules",children:"Angular Rules"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Rule Name"}),(0,r.jsx)(e.th,{children:"Description"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"angular-no-forbidden-services"})}),(0,r.jsx)(e.td,{children:"Disallows usage of forbidden Angular services."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"angular-no-unused-inputs"})}),(0,r.jsx)(e.td,{children:"Disallows unused inputs in Angular components."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"angular-no-direct-dom-manipulation"})}),(0,r.jsx)(e.td,{children:"Disallows direct DOM manipulation in Angular components."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"angular-limit-input"})}),(0,r.jsx)(e.td,{children:"Enforces a limit on the number of inputs in Angular components."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"angular-filenaming"})}),(0,r.jsx)(e.td,{children:"Enforces consistent naming conventions for Angular files."})]})]})]}),"\n",(0,r.jsx)(e.h3,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(e.p,{children:["After installing the plugin, you'll need to add the Angular-specific rules from ",(0,r.jsx)(e.code,{children:"eslint-plugin-hub"})," to your ESLint configuration file (e.g., ",(0,r.jsx)(e.code,{children:"eslintrc.config.mjs"}),",",(0,r.jsx)(e.code,{children:".eslintrc.json"}),", ",(0,r.jsx)(e.code,{children:".eslintrc.js"}),", or ",(0,r.jsx)(e.code,{children:".eslintrc.yaml"}),")."]}),"\n",(0,r.jsx)(e.p,{children:"Here\u2019s how to configure the Angular-specific rules:"}),"\n",(0,r.jsx)(e.h3,{id:"import-angular-rules",children:"Import Angular Rules"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import hub from '@mindfiredigital/eslint-plugin-hub';\nimport globals from 'globals';\n\nexport default [\n  // Extends the angular config preset from the plugin\n  hub.configs['flat/angular'],\n  {\n    languageOptions: {\n      globals: globals.builtin,\n      parserOptions: {\n        ecmaVersion: 2022,\n        sourceType: 'module',\n      },\n    },\n    // Add any additional rules or overrides here\n  },\n];\n"})}),"\n",(0,r.jsx)(e.p,{children:"or"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'{\n  "env": {\n    "es2024": true\n  },\n  "parserOptions": {\n    "ecmaVersion": "latest",\n    "sourceType": "module"\n  },\n  "extends": ["plugin:@mindfiredigital/hub/angular"]\n  // Add any additional rules or overrides here\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"angular-rule-details",children:"Angular Rule Details"}),"\n",(0,r.jsx)(e.h4,{id:"angular-no-forbidden-services",children:(0,r.jsx)(e.code,{children:"angular-no-forbidden-services"})}),"\n",(0,r.jsx)(e.p,{children:"This rule disallows the usage of forbidden Angular services in your project. You can configure a list of forbidden services, ensuring that only authorized services are used."}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Default Level"}),": ",(0,r.jsx)(e.code,{children:"error"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Rationale"}),": Some services, such as certain legacy or deprecated ones, should not be used in new codebases."]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'"hub/angular-no-forbidden-services": ["error", { "forbiddenServices": ["$http", "$scope"] }]\n'})}),"\n",(0,r.jsx)(e.h4,{id:"angular-no-unused-inputs",children:(0,r.jsx)(e.code,{children:"angular-no-unused-inputs"})}),"\n",(0,r.jsxs)(e.p,{children:["This rule checks for unused inputs in Angular components. It warns when an ",(0,r.jsx)(e.code,{children:"@Input()"})," property is declared but not used inside the component's template or logic."]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Default Level"}),": ",(0,r.jsx)(e.code,{children:"warn"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Rationale"}),": Unused inputs add unnecessary complexity and can lead to confusion."]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'"hub/angular-no-unused-inputs": "warn"\n'})}),"\n",(0,r.jsx)(e.h4,{id:"angular-no-direct-dom-manipulation",children:(0,r.jsx)(e.code,{children:"angular-no-direct-dom-manipulation"})}),"\n",(0,r.jsx)(e.p,{children:"This rule disallows direct DOM manipulation within Angular components. Angular provides a declarative approach to working with the DOM, and bypassing that with direct manipulation can lead to hard-to-maintain code."}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Default Level"}),": ",(0,r.jsx)(e.code,{children:"error"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Rationale"}),": Direct DOM manipulation is discouraged in Angular since it goes against Angular's reactive, declarative architecture."]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'"hub/angular-no-direct-dom-manipulation": "error"\n'})}),"\n",(0,r.jsx)(e.h4,{id:"angular-limit-input",children:(0,r.jsx)(e.code,{children:"angular-limit-input"})}),"\n",(0,r.jsxs)(e.p,{children:["This rule enforces a limit on the number of ",(0,r.jsx)(e.code,{children:"@Input()"})," properties that can be declared in a component. You can configure the maximum number of inputs allowed."]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Default Level"}),": ",(0,r.jsx)(e.code,{children:"warn"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Rationale"}),": A large number of inputs can make a component difficult to manage and maintain. Limiting inputs encourages better component design."]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'"hub/angular-limit-input": ["warn", { "maxInputs": 5 }]\n'})}),"\n",(0,r.jsx)(e.h4,{id:"angular-filenaming",children:(0,r.jsx)(e.code,{children:"angular-filenaming"})}),"\n",(0,r.jsx)(e.p,{children:"This rule enforces a consistent naming convention for Angular files. By default, it checks that all Angular files follow a kebab-case naming convention."}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Default Level"}),": ",(0,r.jsx)(e.code,{children:"error"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Rationale"}),": Consistent naming conventions help in organizing and maintaining code in large projects."]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'"hub/angular-filenaming": ["error", { "namingConvention": "kebab-case" }]\n'})}),"\n",(0,r.jsx)(e.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(e.p,{children:"These Angular-specific ESLint rules are designed to promote better coding practices and maintainability in Angular projects. By enforcing limits on inputs, disallowing direct DOM manipulation, and following naming conventions, you'll ensure a clean, maintainable, and efficient codebase."})]})}function u(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>o});var r=i(6540);const l={},s=r.createContext(l);function a(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:a(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);