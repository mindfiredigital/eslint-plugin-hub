"use strict";(self.webpackChunkeslint_plugin_hub=self.webpackChunkeslint_plugin_hub||[]).push([[3976],{619:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>o});var r=s(4848),i=s(8453);const c={},t="Introduction",l={id:"intro",title:"Introduction",description:"eslint-plugin-hub is a comprehensive ESLint plugin designed to help enforce code quality and consistency across various JavaScript and TypeScript projects. The plugin provides a set of custom linting rules that help developers maintain a high standard of coding practices while adhering to specific conventions for general, React, and Angular projects.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/mindfiredigital/eslint-plugin-hub/edit/main/docs/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",next:{title:"Installation",permalink:"/docs/installation"}},d={},o=[{value:"Key Features",id:"key-features",level:2},{value:"Why Use eslint-plugin-hub?",id:"why-use-eslint-plugin-hub",level:2},{value:"Available Rule Categories",id:"available-rule-categories",level:2},{value:"Rules",id:"rules",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"eslint-plugin-hub"})," is a comprehensive ESLint plugin designed to help enforce code quality and consistency across various JavaScript and TypeScript projects. The plugin provides a set of custom linting rules that help developers maintain a high standard of coding practices while adhering to specific conventions for general, React, and Angular projects."]}),"\n",(0,r.jsxs)(n.p,{children:["By integrating ",(0,r.jsx)(n.strong,{children:"eslint-plugin-hub"})," into your workflow, you can enforce strict naming conventions, file structure guidelines, and other coding best practices. This plugin allows teams to maintain cleaner codebases, minimize bugs, and improve collaboration."]}),"\n",(0,r.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"General Rules"}),": A wide range of rules for common coding standards such as naming conventions, file structure, and variable declarations, applicable to any JavaScript or TypeScript project."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"React-Specific Rules"}),": Enforce coding standards specific to React applications, ensuring best practices for component structure, hook usage, and JSX formatting."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Angular-Specific Rules"}),": Enforce Angular-specific coding conventions, ensuring consistency in component, service, and module development."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Customizable Options"}),": Each rule is configurable, allowing you to tailor the plugin to your project\u2019s unique needs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TypeScript Support"}),": Out-of-the-box support for linting TypeScript files (",(0,r.jsx)(n.code,{children:".ts"})," and ",(0,r.jsx)(n.code,{children:".tsx"}),"), ensuring that both JavaScript and TypeScript projects maintain the same level of quality and consistency."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"why-use-eslint-plugin-hub",children:"Why Use eslint-plugin-hub?"}),"\n",(0,r.jsxs)(n.p,{children:["The primary goal of ",(0,r.jsx)(n.strong,{children:"eslint-plugin-hub"})," is to provide an all-in-one solution for maintaining code quality and consistency in JavaScript and TypeScript projects. Here are some reasons why you should integrate this plugin into your development workflow:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enforce Consistent Coding Standards"}),": Ensure that your entire team follows the same rules and standards across different projects, reducing the risk of bugs and increasing code readability."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Improved Collaboration"}),": By enforcing uniform practices, code reviews become easier, and team members can collaborate more effectively."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"React and Angular Focused"}),": Tailored rules for React and Angular development help streamline coding practices for component-based architectures, reducing boilerplate and avoiding common pitfalls."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Highly Configurable"}),": Each rule can be customized to fit your project's specific needs, whether you're enforcing naming conventions, limiting the number of function parameters, or standardizing folder and file naming."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Increased Code Quality"}),": Consistent, clean code helps prevent bugs and makes future refactoring or scaling of the codebase easier."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"available-rule-categories",children:"Available Rule Categories"}),"\n",(0,r.jsx)(n.p,{children:"The plugin is divided into three main categories:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"General Rules"}),": Applies to all JavaScript and TypeScript projects, ensuring consistency in code structure, naming conventions, and code formatting."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"React Rules"}),": Ensures best practices in React development, covering component naming, hooks, and JSX syntax."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Angular Rules"}),": Focuses on Angular-specific guidelines, including consistent naming and structure for components, services, and modules."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Each category comes with a set of rules that you can enable or configure based on your project\u2019s needs."}),"\n",(0,r.jsx)(n.h2,{id:"rules",children:"Rules"}),"\n",(0,r.jsx)(n.p,{children:"This plugin provides the following rules:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Rule"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Fixable"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"vars-camelcase"})}),(0,r.jsx)(n.td,{children:"Enforces camelCase naming convention for variables."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"vars-descriptive"})}),(0,r.jsx)(n.td,{children:"Enforces variable names to start with a verb."}),(0,r.jsx)(n.td,{children:"false"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"class-pascalcase"})}),(0,r.jsx)(n.td,{children:"Enforces PascalCase naming convention for class names."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"filename-kebabcase"})}),(0,r.jsx)(n.td,{children:"Enforces kebab-case naming convention for filenames."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"function-camelcase"})}),(0,r.jsx)(n.td,{children:"Enforces camelCase naming convention for function names."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"function-descriptive"})}),(0,r.jsx)(n.td,{children:"Enforces function names to start with a verb."}),(0,r.jsx)(n.td,{children:"false"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"angular-no-forbidden-services"})}),(0,r.jsx)(n.td,{children:"Disallows the use of forbidden Angular services."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"angular-no-unused-inputs"})}),(0,r.jsx)(n.td,{children:"Disallows unused inputs in Angular components."}),(0,r.jsx)(n.td,{children:"false"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"angular-no-direct-dom-manipulation"})}),(0,r.jsx)(n.td,{children:"Disallows direct DOM manipulation in Angular."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"angular-limit-input"})}),(0,r.jsx)(n.td,{children:"Enforces a limit on the number of inputs in Angular."}),(0,r.jsx)(n.td,{children:"false"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"angular-filenaming"})}),(0,r.jsx)(n.td,{children:"Enforces naming conventions for Angular files."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"file-kebabcase"})}),(0,r.jsx)(n.td,{children:"Enforces kebab-case naming convention for files."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"max-lines-per-file"})}),(0,r.jsx)(n.td,{children:"Enforces a maximum number of lines per file."}),(0,r.jsx)(n.td,{children:"false"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"max-lines-per-function"})}),(0,r.jsx)(n.td,{children:"Enforces a maximum number of lines per function."}),(0,r.jsx)(n.td,{children:"false"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"consistent-return"})}),(0,r.jsx)(n.td,{children:"Enforces consistent return statements."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"max-function-params"})}),(0,r.jsx)(n.td,{children:"Enforces a maximum number of parameters per function."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"no-single-character-vars"})}),(0,r.jsx)(n.td,{children:"Disallows single character variable names."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"vars-lowercase"})}),(0,r.jsx)(n.td,{children:"Enforces lowercase naming convention for variables."}),(0,r.jsx)(n.td,{children:"false"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"folder-lowercase"})}),(0,r.jsx)(n.td,{children:"Enforces lowercase naming convention for folders."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"file-lowercase"})}),(0,r.jsx)(n.td,{children:"Enforces lowercase naming convention for filenames."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"folder-pascalcase"})}),(0,r.jsx)(n.td,{children:"Enforces PascalCase naming convention for folders."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"folder-kebabcase"})}),(0,r.jsx)(n.td,{children:"Enforces kebab-case naming convention for folders."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"folder-camelcase"})}),(0,r.jsx)(n.td,{children:"Enforces camelCase naming convention for folders."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"file-camelcase"})}),(0,r.jsx)(n.td,{children:"Enforces camelCase naming convention for filenames."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"function-pascalcase"})}),(0,r.jsx)(n.td,{children:"Enforces PascalCase naming convention for function names."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"file-pascalcase"})}),(0,r.jsx)(n.td,{children:"Enforces PascalCase naming convention for filenames."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"vars-snakecase"})}),(0,r.jsx)(n.td,{children:"Enforces snake_case naming convention for variables."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"vars-pascalcase"})}),(0,r.jsx)(n.td,{children:"Enforces PascalCase naming convention for variables."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"class-pascalcase"})}),(0,r.jsx)(n.td,{children:"Enforces PascalCase naming convention for classes."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"function-camelcase"})}),(0,r.jsx)(n.td,{children:"Enforces camelCase naming convention for functions."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"function-descriptive"})}),(0,r.jsx)(n.td,{children:"Enforces descriptive names for functions."}),(0,r.jsx)(n.td,{children:"false"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"vars-camelcase"})}),(0,r.jsx)(n.td,{children:"Enforces camelCase naming convention for variables."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"vars-descriptive"})}),(0,r.jsx)(n.td,{children:"Enforces descriptive names for variables."}),(0,r.jsx)(n.td,{children:"false"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["With ",(0,r.jsx)(n.strong,{children:"eslint-plugin-hub"}),", you can streamline your codebase, enforce best practices, and ensure that your project maintains a high level of quality across different JavaScript and TypeScript frameworks."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var r=s(6540);const i={},c=r.createContext(i);function t(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);