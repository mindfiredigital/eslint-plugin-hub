"use strict";(self.webpackChunkeslint_plugin_hub=self.webpackChunkeslint_plugin_hub||[]).push([[5007],{9196:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>a,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var s=r(4848),l=r(8453);const i={},t="Add New Rule",o={id:"addnewrule",title:"Add New Rule",description:"This guide will walk you through the process of adding a new rule to the ESLint Plugin Hub. Follow these steps to contribute a new rule to the project.",source:"@site/docs/addnewrule.md",sourceDirName:".",slug:"/addnewrule",permalink:"/eslint-plugin-hub/docs/addnewrule",draft:!1,unlisted:!1,editUrl:"https://github.com/mindfiredigital/eslint-plugin-hub/edit/main/docs/addnewrule.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Contributing",permalink:"/eslint-plugin-hub/docs/contributing"}},d={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps to Add a New Rule",id:"steps-to-add-a-new-rule",level:2},{value:"Include the following sections in your documentation:",id:"include-the-following-sections-in-your-documentation",level:4},{value:"Rule Details",id:"rule-details",level:2},{value:"Options",id:"options",level:2},{value:"When Not To Use It",id:"when-not-to-use-it",level:2},{value:"Best Practices",id:"best-practices",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"add-new-rule",children:"Add New Rule"})}),"\n",(0,s.jsx)(n.p,{children:"This guide will walk you through the process of adding a new rule to the ESLint Plugin Hub. Follow these steps to contribute a new rule to the project."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ensure you have Node.js and npm (or yarn) installed on your system."}),"\n",(0,s.jsx)(n.li,{children:"Fork and clone the ESLint Plugin Hub repository."}),"\n",(0,s.jsxs)(n.li,{children:["Install project dependencies by running ",(0,s.jsx)(n.code,{children:"npm install"})," or ",(0,s.jsx)(n.code,{children:"yarn install"})," in the project root."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"steps-to-add-a-new-rule",children:"Steps to Add a New Rule"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Use the Rule Generator"})}),"\n",(0,s.jsx)(n.p,{children:"Start by using our Rule Generator script to scaffold the necessary files for your new rule:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run generate-rule your-rule-name [rule-type]\n"})}),"\n",(0,s.jsx)(n.p,{children:"or if you use yarn:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn generate-rule your-rule-name [rule-type]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Replace ",(0,s.jsx)(n.code,{children:"your-rule-name"})," with the name of your new rule (in kebab-case), and ",(0,s.jsx)(n.code,{children:"[rule-type]"})," with either 'general', 'react', or 'angular'. If you don't specify a rule type, the script will prompt you to choose one."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Implement the Rule Logic"})}),"\n",(0,s.jsxs)(n.p,{children:["Open the generated rule file (e.g., ",(0,s.jsx)(n.code,{children:"lib/rules/your-rule-name.js"}),") and implement your rule logic. The generated file will contain a basic structure that you can build upon:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n  meta: {\n    type: 'suggestion', // Can be 'problem', 'suggestion', or 'layout'\n    docs: {\n      description: 'Description of your rule',\n      category: 'Fill in appropriate category',\n      recommended: false,\n      url: 'https://eslint.org/docs/rules/your-rule-name',\n    },\n    fixable: null, // Or 'code' or 'whitespace'\n    schema: [], // Add schema if the rule has options\n  },\n\n  create: function (context) {\n    return {\n      // Add visitors for the AST nodes your rule needs to check\n    };\n  },\n};\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Write Tests"})}),"\n",(0,s.jsxs)(n.p,{children:["Open the generated test file (e.g., ",(0,s.jsx)(n.code,{children:"tests/lib/rules/your-rule-name.js"}),") and write tests for your rule. Ensure you cover various scenarios, including both valid and invalid code examples:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const rule = require('../../../lib/rules/your-rule-name'),\n  RuleTester = require('eslint').RuleTester;\n\nconst ruleTester = new RuleTester();\nruleTester.run('your-rule-name', rule, {\n  valid: [\n    // Add valid code examples\n  ],\n  invalid: [\n    // Add invalid code examples\n  ],\n});\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Update Rule Documentation"})}),"\n",(0,s.jsx)(n.p,{children:"Create a new Markdown file in the appropriate documentation folder based on your rule type:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For general rules: ",(0,s.jsx)(n.code,{children:"docs-docsaurus/docs/general.md"})]}),"\n",(0,s.jsxs)(n.li,{children:["For React rules: ",(0,s.jsx)(n.code,{children:"docs-docsaurus/docs/react.md"})]}),"\n",(0,s.jsxs)(n.li,{children:["For Angular rules: ",(0,s.jsx)(n.code,{children:"docs-docsaurus/docs/angular.md"})]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"include-the-following-sections-in-your-documentation",children:"Include the following sections in your documentation:"}),"\n",(0,s.jsx)(n.h1,{id:"your-rule-name",children:"your-rule-name"}),"\n",(0,s.jsx)(n.p,{children:"Description of what your rule does and why it's useful."}),"\n",(0,s.jsx)(n.h2,{id:"rule-details",children:"Rule Details"}),"\n",(0,s.jsx)(n.p,{children:"This rule aims to..."}),"\n",(0,s.jsxs)(n.p,{children:["Examples of ",(0,s.jsx)(n.strong,{children:"incorrect"})," code for this rule:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Add examples of code that breaks the rule\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Examples of ",(0,s.jsx)(n.strong,{children:"correct"})," code for this rule:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Add examples of code that passes the rule\n"})}),"\n",(0,s.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,s.jsx)(n.p,{children:"If your rule has options, describe them here."}),"\n",(0,s.jsx)(n.h2,{id:"when-not-to-use-it",children:"When Not To Use It"}),"\n",(0,s.jsx)(n.p,{children:"Describe scenarios when this rule might not be desirable."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Update the Main Documentation"})}),"\n",(0,s.jsxs)(n.p,{children:["Add a link to your new rule in the appropriate section of the main documentation file (",(0,s.jsx)(n.code,{children:"docs-docsaurus/docs/intro.md"})," or similar)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Run Tests"})}),"\n",(0,s.jsx)(n.p,{children:"Ensure all tests pass by running:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm test\n"})}),"\n",(0,s.jsx)(n.p,{children:"or"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn test\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Commit Your Changes"})}),"\n",(0,s.jsx)(n.p,{children:"Commit your new rule, tests, and documentation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'git add .\ngit commit -m "Add new rule: your-rule-name"\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Create a Pull Request"})}),"\n",(0,s.jsx)(n.p,{children:"Push your changes to your fork and create a Pull Request on the main ESLint Plugin Hub repository. Provide a clear description of your new rule in the Pull Request."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ensure your rule has a clear purpose and doesn't overlap significantly with existing rules."}),"\n",(0,s.jsx)(n.li,{children:"Write clear, concise documentation with good examples."}),"\n",(0,s.jsx)(n.li,{children:"Include both positive and negative test cases."}),"\n",(0,s.jsx)(n.li,{children:"Consider the performance implications of your rule, especially for large codebases."}),"\n",(0,s.jsx)(n.li,{children:"Be responsive to feedback during the review process."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"By following these steps, you'll be able to contribute a well-structured, thoroughly tested, and properly documented new rule to the ESLint Plugin Hub. Thank you for your contribution!"})]})}function a(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var s=r(6540);const l={},i=s.createContext(l);function t(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);