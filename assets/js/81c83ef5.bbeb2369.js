"use strict";(self.webpackChunkeslint_plugin_hub=self.webpackChunkeslint_plugin_hub||[]).push([[3720],{2876:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"what-is-eslint","metadata":{"permalink":"/eslint-plugin-hub/blog/what-is-eslint","editUrl":"https://github.com/mindfiredigital/eslint-plugin-hub/edit/main/blog/2024-10-01-what-is-eslint.md","source":"@site/blog/2024-10-01-what-is-eslint.md","title":"What is ESLint?","description":"ESLint is a powerful tool for identifying and fixing problems in JavaScript code. It is a static code analysis tool designed to help developers enforce coding standards and find potential issues in their code before it runs.","date":"2024-10-01T00:00:00.000Z","tags":[{"inline":false,"label":"ESLint","permalink":"/eslint-plugin-hub/blog/tags/eslint","description":"ESLint tag description"},{"inline":true,"label":"javascript","permalink":"/eslint-plugin-hub/blog/tags/javascript"},{"inline":true,"label":"linting","permalink":"/eslint-plugin-hub/blog/tags/linting"},{"inline":false,"label":"Code Quality","permalink":"/eslint-plugin-hub/blog/tags/code-quality","description":"Techniques to improve code quality and maintainability."}],"readingTime":2.175,"hasTruncateMarker":true,"authors":[{"name":"Lakin Mohapatra","title":"Tech Lead @ Mindfire Solutions","page":{"permalink":"/eslint-plugin-hub/blog/authors/lakin-mohapatra"},"socials":{"github":"https://github.com/lakinmindfire"},"imageURL":"https://github.com/lakinmindfire.png","key":"lakin-mohapatra"},{"name":"Anand Kumar","title":"Software Engineer @ Mindfire Solutions","url":"https://github.com/anandmindfire","page":{"permalink":"/eslint-plugin-hub/blog/authors/anand-kumar"},"socials":{"github":"https://github.com/anandmindfire"},"imageURL":"https://github.com/anandmindfire.png","key":"anand-kumar"}],"frontMatter":{"slug":"what-is-eslint","title":"What is ESLint?","authors":["lakin-mohapatra","anand-kumar"],"tags":["eslint","javascript","linting","code-quality"]},"unlisted":false,"nextItem":{"title":"ESLint Plugin Hub","permalink":"/eslint-plugin-hub/blog/eslint-plugin-hub"}},"content":"ESLint is a powerful tool for identifying and fixing problems in JavaScript code. It is a **static code analysis tool** designed to help developers enforce coding standards and find potential issues in their code before it runs.\\n\\n\x3c!-- truncate --\x3e\\n\\n![Welcome Image](https://miro.medium.com/v2/resize:fit:720/format:webp/0*-mrLZrmaR5Y2IxXm.png)\\n\\n### Why Use ESLint?\\n\\n1. **Enforces Coding Standards**:\\n   ESLint allows teams to define a set of coding conventions that all developers must adhere to. This consistency helps maintain a clean codebase and reduces the cognitive load when reading and understanding code.\\n\\n2. **Identifies Potential Bugs**:\\n   By analyzing the code, ESLint can catch common programming errors such as syntax errors, unused variables, and incorrect function calls. This proactive error detection helps prevent bugs from reaching production.\\n\\n3. **Supports Custom Rules**:\\n   ESLint comes with a default set of rules, but it also allows developers to create custom rules or extend existing ones to fit the specific needs of their projects. This flexibility ensures that ESLint can adapt to any coding style.\\n\\n4. **Integrates with Various Tools**:\\n   ESLint seamlessly integrates with various development tools and editors, such as Visual Studio Code, WebStorm, and Sublime Text. This integration provides real-time feedback as developers write code, making it easier to correct issues on the fly.\\n\\n### Key Features of ESLint\\n\\n- **Configurable Rules**: ESLint\u2019s rules can be customized based on the project\u2019s requirements. Developers can enable, disable, or configure the severity of rules to suit their needs.\\n\\n- **Plugin Support**: ESLint supports a rich ecosystem of plugins, allowing teams to extend its functionality for frameworks like React, Angular, and Vue.js, as well as for TypeScript and other languages.\\n\\n- **Command Line Interface (CLI)**: ESLint can be run from the command line, making it easy to integrate into build processes or CI/CD pipelines.\\n\\n### Getting Started with ESLint\\n\\nTo get started with ESLint in your project, follow these simple steps:\\n\\n1. **Install ESLint**:\\n\\n   ```bash\\n   npm install eslint --save-dev\\n   ```\\n\\n2. **Initialize ESLint**:\\n   After installation, you can set up ESLint by running:\\n\\n   ```bash\\n   npx eslint --init\\n   ```\\n\\n   This command will guide you through a series of questions to configure ESLint based on your project needs.\\n\\n3. **Run ESLint**:\\n   Once configured, you can run ESLint to analyze your code:\\n\\n   ```bash\\n   npx eslint yourfile.js\\n   ```\\n\\n4. **Fix Issues Automatically**:\\n   ESLint can automatically fix some issues. Use the `--fix` flag to apply these fixes:\\n   ```bash\\n   npx eslint yourfile.js --fix\\n   ```\\n\\nBy using ESLint in your development process, you ensure cleaner, more maintainable code while catching potential issues before they become problems. For more information on setting up and configuring ESLint, check out our installation guide or explore the [official ESLint documentation](https://eslint.org/docs/user-guide/getting-started).\\n\\nHappy coding!"},{"id":"eslint-plugin-hub","metadata":{"permalink":"/eslint-plugin-hub/blog/eslint-plugin-hub","editUrl":"https://github.com/mindfiredigital/eslint-plugin-hub/edit/main/blog/2024-10-01-welcome/index.md","source":"@site/blog/2024-10-01-welcome/index.md","title":"ESLint Plugin Hub","description":"@mindfiredigital/eslint-plugin-hub is a collection of powerful custom ESLint rules designed to help you enforce consistent coding standards and best practices across your JavaScript, TypeScript, React, Angular, and Vue.js projects.","date":"2024-10-01T00:00:00.000Z","tags":[{"inline":false,"label":"ESLint","permalink":"/eslint-plugin-hub/blog/tags/eslint","description":"ESLint tag description"},{"inline":true,"label":"plugin","permalink":"/eslint-plugin-hub/blog/tags/plugin"},{"inline":false,"label":"Coding Standards","permalink":"/eslint-plugin-hub/blog/tags/coding-standards","description":"Best practices and standards for coding."},{"inline":false,"label":"Best Practices","permalink":"/eslint-plugin-hub/blog/tags/best-practices","description":"Coding best practices and guidelines."}],"readingTime":1.645,"hasTruncateMarker":true,"authors":[{"name":"Lakin Mohapatra","title":"Tech Lead @ Mindfire Solutions","page":{"permalink":"/eslint-plugin-hub/blog/authors/lakin-mohapatra"},"socials":{"github":"https://github.com/lakinmindfire"},"imageURL":"https://github.com/lakinmindfire.png","key":"lakin-mohapatra"},{"name":"Anand Kumar","title":"Software Engineer @ Mindfire Solutions","url":"https://github.com/anandmindfire","page":{"permalink":"/eslint-plugin-hub/blog/authors/anand-kumar"},"socials":{"github":"https://github.com/anandmindfire"},"imageURL":"https://github.com/anandmindfire.png","key":"anand-kumar"}],"frontMatter":{"slug":"eslint-plugin-hub","title":"ESLint Plugin Hub","authors":["lakin-mohapatra","anand-kumar"],"tags":["eslint","plugin","coding-standards","best-practices"]},"unlisted":false,"prevItem":{"title":"What is ESLint?","permalink":"/eslint-plugin-hub/blog/what-is-eslint"},"nextItem":{"title":"Why Choose ESLint Plugin Hub for Your JavaScript Projects?","permalink":"/eslint-plugin-hub/blog/why-eslint-plugin-hub"}},"content":"`@mindfiredigital/eslint-plugin-hub` is a collection of powerful custom ESLint rules designed to help you enforce consistent coding standards and best practices across your JavaScript, TypeScript, React, Angular, and Vue.js projects.\\n\\nThis plugin enforces naming conventions, file structure, and function complexity rules, ensuring that your code remains clean, scalable, and maintainable.\\n\\n\x3c!-- truncate --\x3e\\n\\n### What is ESLint Plugin Hub?\\n\\n![Welcome Image](https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExZTM5OG0xd3Z0dTZjcGRta2FmenNlNXl0aHZ1dTM4Z2Z3MjhmOXV1byZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3NE7JhJgZBHlMfmNEa/giphy.webp)\\n\\n- **Enforce Best Coding Practices Automatically**: Tired of inconsistent file names or unmanageable functions? `@mindfiredigital/eslint-plugin-hub` takes care of that by automatically flagging code that doesn\'t meet your project\'s standards.\\n- **Customizable Rules for Various Frameworks**: Whether you\'re working with plain JavaScript, TypeScript, React, Angular, or Vue.js, the plugin adapts to your needs with tailored rule sets.\\n- **Improve Code Quality**: Enforcing consistent standards improves readability and reduces the chance of bugs creeping into your code.\\n\\n### Key Features\\n\\n- **Naming Conventions**: Enforces PascalCase for classes, camelCase for variables and functions, and kebab-case for filenames.\\n- **Folder Structure**: Encourages lowercase folder names for a unified and organized project structure.\\n- **Function Complexity**: Limits the number of lines and parameters per function to keep your code modular and easy to debug.\\n\\n### Installation\\n\\nTo get started with `@mindfiredigital/eslint-plugin-hub`, follow these simple steps:\\n\\n1. **Install the Plugin**:\\n\\n   ```bash\\n   npm install @mindfiredigital/eslint-plugin-hub --save-dev\\n   ```\\n\\n2. **Configure ESLint**:\\n   Add the plugin to your ESLint configuration file (e.g., `.eslintrc.json`):\\n\\n   ```json\\n   {\\n     \\"plugins\\": [\\"@mindfiredigital/hub\\"],\\n     \\"rules\\": {\\n       // Add your rules here\\n     }\\n   }\\n   ```\\n\\n3. **Run ESLint**:\\n   You can now run ESLint to analyze your code:\\n\\n   ```bash\\n   npx eslint yourfile.js\\n   ```\\n\\n4. **Fix Issues Automatically**:\\n   ESLint can automatically fix some issues. Use the `--fix` flag to apply these fixes:\\n   ```bash\\n   npx eslint yourfile.js --fix\\n   ```\\n\\nCheck out our blog posts for more tips and guides on how to get the most out of `@mindfiredigital/eslint-plugin-hub`:\\n\\n- [What is ESLint](../2024-10-01-what-is-eslint.md)\\n- [Why You Should Use ESLint Plugin Hub](../2024-09-30-why-eslint-plugin-hub.md)\\n- [Best Coding Practices Enforced by ESLint Plugin Hub](../2024-09-29-best-coding-practices.md)\\n- [How ESLint Plugin Hub Helps Ensure Code Quality](../2024-09-29-importance-of-linting.md)\\n\\nHappy coding!"},{"id":"why-eslint-plugin-hub","metadata":{"permalink":"/eslint-plugin-hub/blog/why-eslint-plugin-hub","editUrl":"https://github.com/mindfiredigital/eslint-plugin-hub/edit/main/blog/2024-09-30-why-eslint-plugin-hub.md","source":"@site/blog/2024-09-30-why-eslint-plugin-hub.md","title":"Why Choose ESLint Plugin Hub for Your JavaScript Projects?","description":"Why ESLint Plugin Hub?","date":"2024-09-30T00:00:00.000Z","tags":[{"inline":false,"label":"ESLint","permalink":"/eslint-plugin-hub/blog/tags/eslint","description":"ESLint tag description"},{"inline":true,"label":"javascript","permalink":"/eslint-plugin-hub/blog/tags/javascript"},{"inline":false,"label":"Best Practices","permalink":"/eslint-plugin-hub/blog/tags/best-practices","description":"Coding best practices and guidelines."},{"inline":true,"label":"plugin","permalink":"/eslint-plugin-hub/blog/tags/plugin"}],"readingTime":0.975,"hasTruncateMarker":true,"authors":[{"name":"Anand Kumar","title":"Software Engineer @ Mindfire Solutions","url":"https://github.com/anandmindfire","page":{"permalink":"/eslint-plugin-hub/blog/authors/anand-kumar"},"socials":{"github":"https://github.com/anandmindfire"},"imageURL":"https://github.com/anandmindfire.png","key":"anand-kumar"}],"frontMatter":{"title":"Why Choose ESLint Plugin Hub for Your JavaScript Projects?","slug":"why-eslint-plugin-hub","authors":["anand-kumar"],"tags":["eslint","javascript","best-practices","plugin"]},"unlisted":false,"prevItem":{"title":"ESLint Plugin Hub","permalink":"/eslint-plugin-hub/blog/eslint-plugin-hub"},"nextItem":{"title":"Best Coding Practices Enforced by ESLint Plugin Hub","permalink":"/eslint-plugin-hub/blog/best-coding-practices"}},"content":"### Why ESLint Plugin Hub?\\n\\nWhen building large-scale JavaScript projects, maintaining consistent code quality is essential. The `@mindfiredigital/eslint-plugin-hub` is designed to solve this challenge by enforcing best practices in naming conventions, file organization, and function structure. It provides a robust set of rules for JavaScript, React, Angular, and more, helping developers write cleaner, more readable, and maintainable code.\\n\\n\x3c!-- truncate --\x3e\\n\\n![Welcome Image](https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExZDhoODZneDZlOTV0cTdheWVqam51ZDY5MmNkcGpjOG5zcXo5OGgxYSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/hrSFdM4rg8VFpXyz2m/giphy.webp)\\n\\n### Why Should You Use It?\\n\\nHere are a few key reasons why `@mindfiredigital/eslint-plugin-hub` is an essential tool:\\n\\n1. **Consistency**: By enforcing coding standards, your team can avoid confusion caused by inconsistent naming conventions or file structures.\\n2. **Readability**: Proper naming conventions (like PascalCase for classes or camelCase for variables) enhance code readability, making it easier for developers to understand and maintain.\\n3. **Scalability**: As projects grow, following consistent practices can prevent technical debt and make onboarding new developers more seamless.\\n\\n### Who Can Benefit from It?\\n\\nWhether you\u2019re a **JavaScript beginner** trying to follow best practices or a **seasoned developer** working in complex React or Angular projects, this plugin can simplify your workflow. Teams working on **MERN stack** projects can particularly benefit from the built-in recommended rules tailored for this ecosystem."},{"id":"best-coding-practices","metadata":{"permalink":"/eslint-plugin-hub/blog/best-coding-practices","editUrl":"https://github.com/mindfiredigital/eslint-plugin-hub/edit/main/blog/2024-09-29-best-coding-practices.md","source":"@site/blog/2024-09-29-best-coding-practices.md","title":"Best Coding Practices Enforced by ESLint Plugin Hub","description":"Why Coding Standards Matter","date":"2024-09-29T00:00:00.000Z","tags":[{"inline":false,"label":"Best Practices","permalink":"/eslint-plugin-hub/blog/tags/best-practices","description":"Coding best practices and guidelines."},{"inline":false,"label":"ESLint","permalink":"/eslint-plugin-hub/blog/tags/eslint","description":"ESLint tag description"},{"inline":false,"label":"Naming Conventions","permalink":"/eslint-plugin-hub/blog/tags/naming-conventions","description":"Best practices for naming conventions in code."},{"inline":false,"label":"Code Quality","permalink":"/eslint-plugin-hub/blog/tags/code-quality","description":"Techniques to improve code quality and maintainability."}],"readingTime":1.39,"hasTruncateMarker":true,"authors":[{"name":"Anand Kumar","title":"Software Engineer @ Mindfire Solutions","url":"https://github.com/anandmindfire","page":{"permalink":"/eslint-plugin-hub/blog/authors/anand-kumar"},"socials":{"github":"https://github.com/anandmindfire"},"imageURL":"https://github.com/anandmindfire.png","key":"anand-kumar"}],"frontMatter":{"title":"Best Coding Practices Enforced by ESLint Plugin Hub","slug":"best-coding-practices","authors":["anand-kumar"],"tags":["best-practices","eslint","naming-conventions","code-quality"]},"unlisted":false,"prevItem":{"title":"Why Choose ESLint Plugin Hub for Your JavaScript Projects?","permalink":"/eslint-plugin-hub/blog/why-eslint-plugin-hub"},"nextItem":{"title":"How ESLint Plugin Hub Helps You Write Better Code","permalink":"/eslint-plugin-hub/blog/how-eslint-plugin-hub-helps"}},"content":"### Why Coding Standards Matter\\n\\nAdopting consistent coding standards is crucial for maintaining a clean, scalable, and easy-to-understand codebase. It\u2019s not just about readability\u2014having structured naming conventions and optimized functions makes collaboration smoother and helps future developers quickly grasp your project.\\n\\nThis is where `@mindfiredigital/eslint-plugin-hub` comes in. It automatically enforces coding best practices, allowing developers to focus on solving problems without worrying about inconsistent code.\\n\\n\x3c!-- truncate --\x3e\\n\\n![Welcome Image](https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExZ3h6YzY2d3E2d3Rnc3hxbmNzYXEybGRuazg2emR5NTM5MDV4MjE4byZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/26tn33aiTi1jkl6H6/giphy.webp)\\n\\n### Key Best Practices Enforced by the Plugin\\n\\n1. **Consistent Naming Conventions**:\\n\\n   - **PascalCase for Classes**: PascalCase ensures class names stand out and remain distinct from variables or functions.\\n     - Example: `class UserProfile` instead of `class userProfile`.\\n   - **camelCase for Variables and Functions**: A widely accepted standard in JavaScript that improves code consistency by using camelCase for both variables and functions.\\n     - Example: `function getUserData()` instead of `function GetUserData()`.\\n   - **Descriptive Names**: Encourages meaningful and self-explanatory names for variables and functions, aiding future code comprehension.\\n     - Example: `calculateTotalPrice()` instead of `calcPrice()`.\\n\\n2. **Folder and File Organization**:\\n\\n   - **kebab-case for Filenames**: Enforcing kebab-case for filenames promotes uniformity and reduces potential cross-platform issues like case sensitivity.\\n     - Example: `user-profile.js` instead of `UserProfile.js`.\\n   - **Lowercase Folder Names**: Using lowercase for folder names keeps things simple and standardized across your project.\\n\\n3. **Managing Function Complexity**:\\n   - **Limit Lines per Function**: By restricting the number of lines a function can have, the plugin promotes writing smaller, more modular code.\\n   - **Limit Function Parameters**: This rule limits the number of function parameters, encouraging developers to pass objects or arrays when working with more complex data.\\n\\nBy following these steps, your project will automatically adhere to coding best practices, ensuring high-quality code throughout development.\\n\\n---"},{"id":"how-eslint-plugin-hub-helps","metadata":{"permalink":"/eslint-plugin-hub/blog/how-eslint-plugin-hub-helps","editUrl":"https://github.com/mindfiredigital/eslint-plugin-hub/edit/main/blog/2024-09-29-importance-of-linting.md","source":"@site/blog/2024-09-29-importance-of-linting.md","title":"How ESLint Plugin Hub Helps You Write Better Code","description":"The Importance of Linting","date":"2024-09-29T00:00:00.000Z","tags":[{"inline":false,"label":"ESLint","permalink":"/eslint-plugin-hub/blog/tags/eslint","description":"ESLint tag description"},{"inline":false,"label":"Code Quality","permalink":"/eslint-plugin-hub/blog/tags/code-quality","description":"Techniques to improve code quality and maintainability."},{"inline":false,"label":"Coding Standards","permalink":"/eslint-plugin-hub/blog/tags/coding-standards","description":"Best practices and standards for coding."},{"inline":true,"label":"javascript","permalink":"/eslint-plugin-hub/blog/tags/javascript"}],"readingTime":1.315,"hasTruncateMarker":true,"authors":[{"name":"Anand Kumar","title":"Software Engineer @ Mindfire Solutions","url":"https://github.com/anandmindfire","page":{"permalink":"/eslint-plugin-hub/blog/authors/anand-kumar"},"socials":{"github":"https://github.com/anandmindfire"},"imageURL":"https://github.com/anandmindfire.png","key":"anand-kumar"}],"frontMatter":{"title":"How ESLint Plugin Hub Helps You Write Better Code","slug":"how-eslint-plugin-hub-helps","authors":["anand-kumar"],"tags":["eslint","code-quality","coding-standards","javascript"]},"unlisted":false,"prevItem":{"title":"Best Coding Practices Enforced by ESLint Plugin Hub","permalink":"/eslint-plugin-hub/blog/best-coding-practices"},"nextItem":{"title":"Interactive ESLint Plugin Hub Demo","permalink":"/eslint-plugin-hub/blog/eslint-plugin-hub-interactive"}},"content":"### The Importance of Linting\\n\\nLinting tools like ESLint are vital in helping developers catch syntax errors, poor code formatting, and potential bugs before they make it into production. But with `@mindfiredigital/eslint-plugin-hub`, we take things a step further by enforcing **naming conventions**, **file organization**, and **function standards**.\\n\\n\x3c!-- truncate --\x3e\\n\\n![Welcome Image](https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExZnk3NHBleHJ4bXR6d2U2c3JqOHJmamxvYjdvdjB5bWtxMnA1OWxieCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Ws6T5PN7wHv3cY8xy8/giphy.webp)\\n\\n### Key Features that Set ESLint Plugin Hub Apart\\n\\n1. **Naming Conventions**: The plugin enforces camelCase for variables, PascalCase for classes, and kebab-case for filenames. This ensures consistency across your entire project.\\n   - Example: Variables like `myVariable` and class names like `MyClass` are enforced by the rules.\\n2. **File Structure Rules**: Keep your folders and files organized by enforcing kebab-case for filenames or lower-case folder names. This prevents common issues like case-sensitive errors in cross-platform development.\\n3. **React and Angular Specific Rules**: The plugin supports popular frameworks like React and Angular, offering rules that enforce the proper naming of components, filenames, and best practices for using inputs in Angular.\\n\\n### Boosting Team Productivity\\n\\nWhen everyone on your team adheres to the same set of rules, it reduces the cognitive load of reviewing or writing new code. Developers spend less time debating stylistic choices and more time building features.\\n\\n### Examples of Rules in Action\\n\\nHere\u2019s how some of the key rules in the plugin work:\\n\\n- **file-kebabcase**: Ensures that filenames are always in kebab-case format (`my-file.js`).\\n- **function-descriptive**: Warns when function names aren\u2019t descriptive enough, promoting clarity.\\n- **react-component-name-match-filename**: Makes sure React component names match their filenames.\\n\\nBy catching these issues early, the plugin helps you avoid refactoring down the line."},{"id":"eslint-plugin-hub-interactive","metadata":{"permalink":"/eslint-plugin-hub/blog/eslint-plugin-hub-interactive","editUrl":"https://github.com/mindfiredigital/eslint-plugin-hub/edit/main/blog/2024-09-28-mdx-blog-post.mdx","source":"@site/blog/2024-09-28-mdx-blog-post.mdx","title":"Interactive ESLint Plugin Hub Demo","description":"@mindfiredigital/eslint-plugin-hub is a powerful tool that enforces consistent coding practices across your JavaScript, React, Angular, and TypeScript projects.","date":"2024-09-28T00:00:00.000Z","tags":[{"inline":false,"label":"ESLint","permalink":"/eslint-plugin-hub/blog/tags/eslint","description":"ESLint tag description"},{"inline":false,"label":"Coding Standards","permalink":"/eslint-plugin-hub/blog/tags/coding-standards","description":"Best practices and standards for coding."},{"inline":false,"label":"Best Practices","permalink":"/eslint-plugin-hub/blog/tags/best-practices","description":"Coding best practices and guidelines."}],"readingTime":1.365,"hasTruncateMarker":true,"authors":[{"name":"Anand Kumar","title":"Software Engineer @ Mindfire Solutions","url":"https://github.com/anandmindfire","page":{"permalink":"/eslint-plugin-hub/blog/authors/anand-kumar"},"socials":{"github":"https://github.com/anandmindfire"},"imageURL":"https://github.com/anandmindfire.png","key":"anand-kumar"}],"frontMatter":{"slug":"eslint-plugin-hub-interactive","title":"Interactive ESLint Plugin Hub Demo","authors":["anand-kumar"],"tags":["eslint","coding-standards","best-practices"]},"unlisted":false,"prevItem":{"title":"How ESLint Plugin Hub Helps You Write Better Code","permalink":"/eslint-plugin-hub/blog/how-eslint-plugin-hub-helps"}},"content":"`@mindfiredigital/eslint-plugin-hub` is a powerful tool that enforces consistent coding practices across your JavaScript, React, Angular, and TypeScript projects.\\n\\n:::tip What does this plugin do?\\nIt automatically checks your code for common errors and enforces best practices, like proper naming conventions and code organization. This helps keep your code clean, readable, and maintainable.\\n:::\\n\\n\x3c!-- truncate --\x3e\\n\\n### Key Features of the Plugin\\n\\n- **Naming Conventions**: Enforces PascalCase for classes, camelCase for variables, and kebab-case for filenames.\\n- **Function Complexity**: Restricts the number of lines per function and limits the number of function parameters.\\n- **Consistency**: Ensures that your entire team follows the same coding standards.\\n\\n### Try an Example of an ESLint Rule\\n\\nLet\'s take a look at how `@mindfiredigital/eslint-plugin-hub` enforces naming conventions. Here\'s a small piece of code:\\n\\n```js\\nclass userprofile {\\n  getuserdata() {\\n    return \'data\';\\n  }\\n}\\n```\\n\\nThis code violates the **PascalCase** naming convention for class names and the **camelCase** convention for function names.\\n\\n<button onClick={() => alert(\'Violations: Class name and function names should be PascalCase and camelCase respectively.\')}>Check Violations</button>\\n\\n### Correct Code\\n\\nHere\u2019s how the code should look after applying the rules enforced by the plugin:\\n\\n```js\\nclass UserProfile {\\n  getUserData() {\\n    return \'data\';\\n  }\\n}\\n```\\n\\nBy using `@mindfiredigital/eslint-plugin-hub`, your team can ensure that everyone writes code in a uniform way, making it easier to read and maintain.\\n\\n---\\n\\nFeel free to play around with these rules in your project by installing the plugin:\\n\\n```bash\\nnpm install @mindfiredigital/eslint-plugin-hub --save-dev\\n```\\n\\n### Conclusion\\n\\nConsistent code not only helps avoid errors but also makes onboarding new developers easier. With this ESLint plugin, you can enforce these best practices automatically.\\n\\n```"}]}}')}}]);